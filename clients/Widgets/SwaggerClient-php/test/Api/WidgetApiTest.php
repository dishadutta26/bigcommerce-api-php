<?php
/**
 * WidgetApiTest
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Widgets
 *
 * Create and manage [widgets](/api-docs/storefront/widgets/widgets-overview), widget templates, regions, and placements.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace BigCommerce\Widgets;

use BigCommerce\Widgets\Configuration;
use BigCommerce\Widgets\ApiException;
use BigCommerce\Widgets\ObjectSerializer;
use BigCommerce\Widgets\Api\WidgetApi;

/**
 * WidgetApiTest Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        $secrets = json_decode(file_get_contents(__DIR__ . '/../../../../../gulpfile.config.json'), true);

        $config = Configuration::getDefaultConfiguration();
        $config->setApiKey('X-Auth-Client', $secrets['clientId']);
        $config->setApiKey('X-Auth-Token', $secrets['accessToken']);
        $config->setHost(str_replace('{$$.env.store_hash}', $secrets['storeId'], $config->getHost()));      
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createWidget
     *
     * Create a Widget.
     *
     */
    public function testCreateWidget()
    {
    }

    /**
     * Test case for deleteWidget
     *
     * Delete a Widget.
     *
     */
    public function testDeleteWidget()
    {
    }

    /**
     * Test case for getWidget
     *
     * Get a Widget.
     *
     */
    public function testGetWidget()
    {
    }

    /**
     * Test case for getWidgets
     *
     * Get All Widgets.
     *
     */
    public function testGetWidgets()
    {
        $apiInstance = new WidgetApi(
            new \GuzzleHttp\Client(),
            Configuration::getDefaultConfiguration()
        );

        try {
            $result = $apiInstance->getWidgets();
            $this->assertTrue(is_object($result));
            $this->assertTrue(is_array($result->getData()));
            $this->assertTrue(is_object($result->getMeta()));
            $this->assertEquals(50, $result->getMeta()->getPagination()->getPerPage());
        } catch (Exception $e) {
            echo 'Exception when calling WidgetApi->getWidgets: ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for updateWidget
     *
     * Update a Widget.
     *
     */
    public function testUpdateWidget()
    {
    }
}
