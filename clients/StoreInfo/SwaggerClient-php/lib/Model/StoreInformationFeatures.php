<?php
/**
 * StoreInformationFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\StoreInfo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Store Information
 *
 * Get Store Information endpoint, manage store profile settings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\StoreInfo\Model;

use \ArrayAccess;
use \BigCommerce\StoreInfo\ObjectSerializer;

/**
 * StoreInformationFeatures Class Doc Comment
 *
 * @category Class
 * @description + &#x60;stencil_enabled&#x60;: &#x60;true&#x60; (boolean)     + &#x60;sitewidehttps_enabled&#x60;: &#x60;false&#x60; (boolean)     + &#x60;facebook_catalog_id&#x60; (string)
 * @package  BigCommerce\StoreInfo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreInformationFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreInformation_features';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stencil_enabled' => 'bool',
'sitewidehttps_enabled' => 'string',
'facebook_catalog_id' => 'string',
'checkout_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stencil_enabled' => null,
'sitewidehttps_enabled' => null,
'facebook_catalog_id' => null,
'checkout_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stencil_enabled' => 'stencil_enabled',
'sitewidehttps_enabled' => 'sitewidehttps_enabled',
'facebook_catalog_id' => 'facebook_catalog_id',
'checkout_type' => 'checkout_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stencil_enabled' => 'setStencilEnabled',
'sitewidehttps_enabled' => 'setSitewidehttpsEnabled',
'facebook_catalog_id' => 'setFacebookCatalogId',
'checkout_type' => 'setCheckoutType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stencil_enabled' => 'getStencilEnabled',
'sitewidehttps_enabled' => 'getSitewidehttpsEnabled',
'facebook_catalog_id' => 'getFacebookCatalogId',
'checkout_type' => 'getCheckoutType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stencil_enabled'] = isset($data['stencil_enabled']) ? $data['stencil_enabled'] : null;
        $this->container['sitewidehttps_enabled'] = isset($data['sitewidehttps_enabled']) ? $data['sitewidehttps_enabled'] : null;
        $this->container['facebook_catalog_id'] = isset($data['facebook_catalog_id']) ? $data['facebook_catalog_id'] : null;
        $this->container['checkout_type'] = isset($data['checkout_type']) ? $data['checkout_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stencil_enabled
     *
     * @return bool
     */
    public function getStencilEnabled()
    {
        return $this->container['stencil_enabled'];
    }

    /**
     * Sets stencil_enabled
     *
     * @param bool $stencil_enabled Indicates whether a store is using a Stencil theme.
     *
     * @return $this
     */
    public function setStencilEnabled($stencil_enabled)
    {
        $this->container['stencil_enabled'] = $stencil_enabled;

        return $this;
    }

    /**
     * Gets sitewidehttps_enabled
     *
     * @return string
     */
    public function getSitewidehttpsEnabled()
    {
        return $this->container['sitewidehttps_enabled'];
    }

    /**
     * Sets sitewidehttps_enabled
     *
     * @param string $sitewidehttps_enabled Indicates if there is sitewide https.
     *
     * @return $this
     */
    public function setSitewidehttpsEnabled($sitewidehttps_enabled)
    {
        $this->container['sitewidehttps_enabled'] = $sitewidehttps_enabled;

        return $this;
    }

    /**
     * Gets facebook_catalog_id
     *
     * @return string
     */
    public function getFacebookCatalogId()
    {
        return $this->container['facebook_catalog_id'];
    }

    /**
     * Sets facebook_catalog_id
     *
     * @param string $facebook_catalog_id Id of the facebook catalog. If there is none, it returns an empty string.
     *
     * @return $this
     */
    public function setFacebookCatalogId($facebook_catalog_id)
    {
        $this->container['facebook_catalog_id'] = $facebook_catalog_id;

        return $this;
    }

    /**
     * Gets checkout_type
     *
     * @return string
     */
    public function getCheckoutType()
    {
        return $this->container['checkout_type'];
    }

    /**
     * Sets checkout_type
     *
     * @param string $checkout_type What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
     *
     * @return $this
     */
    public function setCheckoutType($checkout_type)
    {
        $this->container['checkout_type'] = $checkout_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
