<?php
/**
 * Timezone
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\StoreInfo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Store Information
 *
 * Get Store Information endpoint, manage store profile settings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\StoreInfo\Model;

use \ArrayAccess;
use \BigCommerce\StoreInfo\ObjectSerializer;

/**
 * Timezone Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\StoreInfo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Timezone implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Timezone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'raw_offset' => 'int',
'dst_offset' => 'int',
'dst_correction' => 'bool',
'date_format' => '\BigCommerce\StoreInfo\Model\DateFormat'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'raw_offset' => null,
'dst_offset' => null,
'dst_correction' => null,
'date_format' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'raw_offset' => 'raw_offset',
'dst_offset' => 'dst_offset',
'dst_correction' => 'dst_correction',
'date_format' => 'date_format'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'raw_offset' => 'setRawOffset',
'dst_offset' => 'setDstOffset',
'dst_correction' => 'setDstCorrection',
'date_format' => 'setDateFormat'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'raw_offset' => 'getRawOffset',
'dst_offset' => 'getDstOffset',
'dst_correction' => 'getDstCorrection',
'date_format' => 'getDateFormat'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['raw_offset'] = isset($data['raw_offset']) ? $data['raw_offset'] : null;
        $this->container['dst_offset'] = isset($data['dst_offset']) ? $data['dst_offset'] : null;
        $this->container['dst_correction'] = isset($data['dst_correction']) ? $data['dst_correction'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name a string identifying the time zone, in the format: <Continent-name>/<City-name>.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets raw_offset
     *
     * @return int
     */
    public function getRawOffset()
    {
        return $this->container['raw_offset'];
    }

    /**
     * Sets raw_offset
     *
     * @param int $raw_offset a negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
     *
     * @return $this
     */
    public function setRawOffset($raw_offset)
    {
        $this->container['raw_offset'] = $raw_offset;

        return $this;
    }

    /**
     * Gets dst_offset
     *
     * @return int
     */
    public function getDstOffset()
    {
        return $this->container['dst_offset'];
    }

    /**
     * Sets dst_offset
     *
     * @param int $dst_offset \"-/+\" offset from UTC/GMT, in seconds, during summer/daylight saving time.
     *
     * @return $this
     */
    public function setDstOffset($dst_offset)
    {
        $this->container['dst_offset'] = $dst_offset;

        return $this;
    }

    /**
     * Gets dst_correction
     *
     * @return bool
     */
    public function getDstCorrection()
    {
        return $this->container['dst_correction'];
    }

    /**
     * Sets dst_correction
     *
     * @param bool $dst_correction a boolean indicating whether this time zone observes daylight saving time.
     *
     * @return $this
     */
    public function setDstCorrection($dst_correction)
    {
        $this->container['dst_correction'] = $dst_correction;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \BigCommerce\StoreInfo\Model\DateFormat
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \BigCommerce\StoreInfo\Model\DateFormat $date_format date_format
     *
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
