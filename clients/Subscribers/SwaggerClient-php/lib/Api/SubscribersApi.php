<?php
/**
 * SubscribersApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Subscribers
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Subscribers
 *
 * Manage subscribers.  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Subscribers\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BigCommerce\Subscribers\ApiException;
use BigCommerce\Subscribers\Configuration;
use BigCommerce\Subscribers\HeaderSelector;
use BigCommerce\Subscribers\ObjectSerializer;

/**
 * SubscribersApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Subscribers
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscribersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSubscriber
     *
     * Create a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPost1 $body body (required)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $content_type content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Subscribers\Model\SubscriberResponse
     */
    public function createSubscriber($body, $accept = 'application/json', $content_type = 'application/json')
    {
        list($response) = $this->createSubscriberWithHttpInfo($body, $accept, $content_type);
        return $response;
    }

    /**
     * Operation createSubscriberWithHttpInfo
     *
     * Create a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPost1 $body (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Subscribers\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriberWithHttpInfo($body, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->createSubscriberRequest($body, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\SubscriberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriberAsync
     *
     * Create a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPost1 $body (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriberAsync($body, $accept = 'application/json', $content_type = 'application/json')
    {
        return $this->createSubscriberAsyncWithHttpInfo($body, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriberAsyncWithHttpInfo
     *
     * Create a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPost1 $body (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriberAsyncWithHttpInfo($body, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->createSubscriberRequest($body, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriber'
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPost1 $body (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriberRequest($body, $accept = 'application/json', $content_type = 'application/json')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscriber'
            );
        }

        $resourcePath = '/customers/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriberById
     *
     * Delete a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $content_type content_type (optional, default to application/json)
     * @param  string $accept accept (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscriberById($subscriber_id, $content_type = 'application/json', $accept = 'application/json')
    {
        $this->deleteSubscriberByIdWithHttpInfo($subscriber_id, $content_type, $accept);
    }

    /**
     * Operation deleteSubscriberByIdWithHttpInfo
     *
     * Delete a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $content_type (optional, default to application/json)
     * @param  string $accept (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriberByIdWithHttpInfo($subscriber_id, $content_type = 'application/json', $accept = 'application/json')
    {
        $returnType = '';
        $request = $this->deleteSubscriberByIdRequest($subscriber_id, $content_type, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriberByIdAsync
     *
     * Delete a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $content_type (optional, default to application/json)
     * @param  string $accept (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriberByIdAsync($subscriber_id, $content_type = 'application/json', $accept = 'application/json')
    {
        return $this->deleteSubscriberByIdAsyncWithHttpInfo($subscriber_id, $content_type, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriberByIdAsyncWithHttpInfo
     *
     * Delete a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $content_type (optional, default to application/json)
     * @param  string $accept (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriberByIdAsyncWithHttpInfo($subscriber_id, $content_type = 'application/json', $accept = 'application/json')
    {
        $returnType = '';
        $request = $this->deleteSubscriberByIdRequest($subscriber_id, $content_type, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriberById'
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $content_type (optional, default to application/json)
     * @param  string $accept (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubscriberByIdRequest($subscriber_id, $content_type = 'application/json', $accept = 'application/json')
    {
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling deleteSubscriberById'
            );
        }

        $resourcePath = '/customers/subscribers/{subscriber_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscribers
     *
     * Delete Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $content_type content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscribers($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $accept = 'application/json', $content_type = 'application/json')
    {
        $this->deleteSubscribersWithHttpInfo($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $accept, $content_type);
    }

    /**
     * Operation deleteSubscribersWithHttpInfo
     *
     * Delete Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscribersWithHttpInfo($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '';
        $request = $this->deleteSubscribersRequest($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscribersAsync
     *
     * Delete Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscribersAsync($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $accept = 'application/json', $content_type = 'application/json')
    {
        return $this->deleteSubscribersAsyncWithHttpInfo($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscribersAsyncWithHttpInfo
     *
     * Delete Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscribersAsyncWithHttpInfo($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '';
        $request = $this->deleteSubscribersRequest($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscribers'
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubscribersRequest($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $accept = 'application/json', $content_type = 'application/json')
    {

        $resourcePath = '/customers/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source, null);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['order_id'] = ObjectSerializer::toQueryValue($order_id, null);
        }
        // query params
        if ($date_created !== null) {
            $queryParams['date_created'] = ObjectSerializer::toQueryValue($date_created, 'date-time');
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = ObjectSerializer::toQueryValue($date_modified, 'date-time');
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriberById
     *
     * Get a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $content_type content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Subscribers\Model\SubscriberResponse
     */
    public function getSubscriberById($subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        list($response) = $this->getSubscriberByIdWithHttpInfo($subscriber_id, $accept, $content_type);
        return $response;
    }

    /**
     * Operation getSubscriberByIdWithHttpInfo
     *
     * Get a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Subscribers\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriberByIdWithHttpInfo($subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->getSubscriberByIdRequest($subscriber_id, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\SubscriberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriberByIdAsync
     *
     * Get a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberByIdAsync($subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        return $this->getSubscriberByIdAsyncWithHttpInfo($subscriber_id, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriberByIdAsyncWithHttpInfo
     *
     * Get a Subscriber
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriberByIdAsyncWithHttpInfo($subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->getSubscriberByIdRequest($subscriber_id, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriberById'
     *
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriberByIdRequest($subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling getSubscriberById'
            );
        }

        $resourcePath = '/customers/subscribers/{subscriber_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscribers
     *
     * Get Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param  int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $content_type content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Subscribers\Model\SubscriberCollectionResponse
     */
    public function getSubscribers($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $page = null, $limit = null, $accept = 'application/json', $content_type = 'application/json')
    {
        list($response) = $this->getSubscribersWithHttpInfo($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $page, $limit, $accept, $content_type);
        return $response;
    }

    /**
     * Operation getSubscribersWithHttpInfo
     *
     * Get Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param  int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Subscribers\Model\SubscriberCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscribersWithHttpInfo($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $page = null, $limit = null, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberCollectionResponse';
        $request = $this->getSubscribersRequest($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $page, $limit, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\SubscriberCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscribersAsync
     *
     * Get Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param  int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribersAsync($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $page = null, $limit = null, $accept = 'application/json', $content_type = 'application/json')
    {
        return $this->getSubscribersAsyncWithHttpInfo($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $page, $limit, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscribersAsyncWithHttpInfo
     *
     * Get Subscribers
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param  int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscribersAsyncWithHttpInfo($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $page = null, $limit = null, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberCollectionResponse';
        $request = $this->getSubscribersRequest($email, $first_name, $last_name, $source, $order_id, $date_created, $date_modified, $page, $limit, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscribers'
     *
     * @param  string $email Filter items by email. (optional)
     * @param  string $first_name Filter items by first_name. (optional)
     * @param  string $last_name Filter items by last_name. (optional)
     * @param  string $source Filter items by source. (optional)
     * @param  int $order_id Filter items by order_id. (optional)
     * @param  \DateTime $date_created Filter items by date_created. (optional)
     * @param  \DateTime $date_modified Filter items by date_modified. For example &#x60;v3/catalog/products?date_last_imported:min&#x3D;2018-06-15&#x60; (optional)
     * @param  int $page Specifies the page number in a limited (paginated) list of products. (optional)
     * @param  int $limit Controls the number of items per page in a limited (paginated) list of products. (optional)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscribersRequest($email = null, $first_name = null, $last_name = null, $source = null, $order_id = null, $date_created = null, $date_modified = null, $page = null, $limit = null, $accept = 'application/json', $content_type = 'application/json')
    {

        $resourcePath = '/customers/subscribers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source, null);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['order_id'] = ObjectSerializer::toQueryValue($order_id, null);
        }
        // query params
        if ($date_created !== null) {
            $queryParams['date_created'] = ObjectSerializer::toQueryValue($date_created, 'date-time');
        }
        // query params
        if ($date_modified !== null) {
            $queryParams['date_modified'] = ObjectSerializer::toQueryValue($date_modified, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriber
     *
     * Update a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPut1 $body body (required)
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept accept (optional, default to application/json)
     * @param  string $content_type content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Subscribers\Model\SubscriberResponse
     */
    public function updateSubscriber($body, $subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        list($response) = $this->updateSubscriberWithHttpInfo($body, $subscriber_id, $accept, $content_type);
        return $response;
    }

    /**
     * Operation updateSubscriberWithHttpInfo
     *
     * Update a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPut1 $body (required)
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \BigCommerce\Subscribers\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Subscribers\Model\SubscriberResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriberWithHttpInfo($body, $subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->updateSubscriberRequest($body, $subscriber_id, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\SubscriberResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Subscribers\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubscriberAsync
     *
     * Update a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPut1 $body (required)
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriberAsync($body, $subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        return $this->updateSubscriberAsyncWithHttpInfo($body, $subscriber_id, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriberAsyncWithHttpInfo
     *
     * Update a Subscriber
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPut1 $body (required)
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriberAsyncWithHttpInfo($body, $subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        $returnType = '\BigCommerce\Subscribers\Model\SubscriberResponse';
        $request = $this->updateSubscriberRequest($body, $subscriber_id, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriber'
     *
     * @param  \BigCommerce\Subscribers\Model\SubscriberPut1 $body (required)
     * @param  int $subscriber_id The ID of the &#x60;Subscriber&#x60; requested. (required)
     * @param  string $accept (optional, default to application/json)
     * @param  string $content_type (optional, default to application/json)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubscriberRequest($body, $subscriber_id, $accept = 'application/json', $content_type = 'application/json')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateSubscriber'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling updateSubscriber'
            );
        }

        $resourcePath = '/customers/subscribers/{subscriber_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriber_id' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Client');
        if ($apiKey !== null) {
            $headers['X-Auth-Client'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Auth-Token');
        if ($apiKey !== null) {
            $headers['X-Auth-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
