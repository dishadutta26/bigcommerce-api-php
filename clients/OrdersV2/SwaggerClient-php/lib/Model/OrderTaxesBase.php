<?php
/**
 * OrderTaxesBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V2
 *
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\OrdersV2\Model;

use \ArrayAccess;
use \BigCommerce\OrdersV2\ObjectSerializer;

/**
 * OrderTaxesBase Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderTaxesBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderTaxes_Base';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'order_id' => 'int',
'order_address_id' => 'int',
'tax_rate_id' => 'int',
'tax_class_id' => 'int',
'name' => 'string',
'class' => 'string',
'rate' => 'string',
'priority' => 'float',
'priority_amount' => 'string',
'line_amount' => 'string',
'order_product_id' => 'string',
'line_item_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'order_id' => null,
'order_address_id' => null,
'tax_rate_id' => null,
'tax_class_id' => null,
'name' => null,
'class' => null,
'rate' => null,
'priority' => null,
'priority_amount' => null,
'line_amount' => null,
'order_product_id' => null,
'line_item_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'order_id' => 'order_id',
'order_address_id' => 'order_address_id',
'tax_rate_id' => 'tax_rate_id',
'tax_class_id' => 'tax_class_id',
'name' => 'name',
'class' => 'class',
'rate' => 'rate',
'priority' => 'priority',
'priority_amount' => 'priority_amount',
'line_amount' => 'line_amount',
'order_product_id' => 'order_product_id',
'line_item_type' => 'line_item_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'order_id' => 'setOrderId',
'order_address_id' => 'setOrderAddressId',
'tax_rate_id' => 'setTaxRateId',
'tax_class_id' => 'setTaxClassId',
'name' => 'setName',
'class' => 'setClass',
'rate' => 'setRate',
'priority' => 'setPriority',
'priority_amount' => 'setPriorityAmount',
'line_amount' => 'setLineAmount',
'order_product_id' => 'setOrderProductId',
'line_item_type' => 'setLineItemType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'order_id' => 'getOrderId',
'order_address_id' => 'getOrderAddressId',
'tax_rate_id' => 'getTaxRateId',
'tax_class_id' => 'getTaxClassId',
'name' => 'getName',
'class' => 'getClass',
'rate' => 'getRate',
'priority' => 'getPriority',
'priority_amount' => 'getPriorityAmount',
'line_amount' => 'getLineAmount',
'order_product_id' => 'getOrderProductId',
'line_item_type' => 'getLineItemType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINE_ITEM_TYPE_ITEM = 'item';
const LINE_ITEM_TYPE_SHIPPING = 'shipping';
const LINE_ITEM_TYPE_HANDLING = 'handling';
const LINE_ITEM_TYPE_GIFT_WRAPPING = 'gift-wrapping';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineItemTypeAllowableValues()
    {
        return [
            self::LINE_ITEM_TYPE_ITEM,
self::LINE_ITEM_TYPE_SHIPPING,
self::LINE_ITEM_TYPE_HANDLING,
self::LINE_ITEM_TYPE_GIFT_WRAPPING,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_address_id'] = isset($data['order_address_id']) ? $data['order_address_id'] : null;
        $this->container['tax_rate_id'] = isset($data['tax_rate_id']) ? $data['tax_rate_id'] : null;
        $this->container['tax_class_id'] = isset($data['tax_class_id']) ? $data['tax_class_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['priority_amount'] = isset($data['priority_amount']) ? $data['priority_amount'] : null;
        $this->container['line_amount'] = isset($data['line_amount']) ? $data['line_amount'] : null;
        $this->container['order_product_id'] = isset($data['order_product_id']) ? $data['order_product_id'] : null;
        $this->container['line_item_type'] = isset($data['line_item_type']) ? $data['line_item_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLineItemTypeAllowableValues();
        if (!is_null($this->container['line_item_type']) && !in_array($this->container['line_item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'line_item_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique numeric identifier of the taxes object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_address_id
     *
     * @return int
     */
    public function getOrderAddressId()
    {
        return $this->container['order_address_id'];
    }

    /**
     * Sets order_address_id
     *
     * @param int $order_address_id The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature.
     *
     * @return $this
     */
    public function setOrderAddressId($order_address_id)
    {
        $this->container['order_address_id'] = $order_address_id;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return int
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param int $tax_rate_id The unique numeric identifier of the tax rate.
     *
     * @return $this
     */
    public function setTaxRateId($tax_rate_id)
    {
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets tax_class_id
     *
     * @return int
     */
    public function getTaxClassId()
    {
        return $this->container['tax_class_id'];
    }

    /**
     * Sets tax_class_id
     *
     * @param int $tax_class_id The unique numeric identifier of the tax class object. NOTE: Will be 0 if automatic tax was enabled, or if the default tax class was used.
     *
     * @return $this
     */
    public function setTaxClassId($tax_class_id)
    {
        $this->container['tax_class_id'] = $tax_class_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the tax class object.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class The name of the type of tax that was applied. NOTE: will be “Automatic Tax” if automatic tax was enabled.
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string $rate The tax rate.  The priority order in which the tax is applied (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float $priority The order in which the tax is applied
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets priority_amount
     *
     * @return string
     */
    public function getPriorityAmount()
    {
        return $this->container['priority_amount'];
    }

    /**
     * Sets priority_amount
     *
     * @param string $priority_amount The amount of tax calculated on the order.   (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setPriorityAmount($priority_amount)
    {
        $this->container['priority_amount'] = $priority_amount;

        return $this;
    }

    /**
     * Gets line_amount
     *
     * @return string
     */
    public function getLineAmount()
    {
        return $this->container['line_amount'];
    }

    /**
     * Sets line_amount
     *
     * @param string $line_amount (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setLineAmount($line_amount)
    {
        $this->container['line_amount'] = $line_amount;

        return $this;
    }

    /**
     * Gets order_product_id
     *
     * @return string
     */
    public function getOrderProductId()
    {
        return $this->container['order_product_id'];
    }

    /**
     * Sets order_product_id
     *
     * @param string $order_product_id If the `line_item_type` is `item` or `handling` then this field will be the order product id. Otherwise the field will return as null.
     *
     * @return $this
     */
    public function setOrderProductId($order_product_id)
    {
        $this->container['order_product_id'] = $order_product_id;

        return $this;
    }

    /**
     * Gets line_item_type
     *
     * @return string
     */
    public function getLineItemType()
    {
        return $this->container['line_item_type'];
    }

    /**
     * Sets line_item_type
     *
     * @param string $line_item_type Type of tax on item
     *
     * @return $this
     */
    public function setLineItemType($line_item_type)
    {
        $allowedValues = $this->getLineItemTypeAllowableValues();
        if (!is_null($line_item_type) && !in_array($line_item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'line_item_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_item_type'] = $line_item_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
