<?php
/**
 * OrderResp1
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V2
 *
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\OrdersV2\Model;

use \ArrayAccess;
use \BigCommerce\OrdersV2\ObjectSerializer;

/**
 * OrderResp1 Class Doc Comment
 *
 * @category Class
 * @description Order object returned in responses.
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderResp1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'order_Resp_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_handling_cost' => 'string',
'base_shipping_cost' => 'string',
'base_wrapping_cost' => 'string',
'billing_address' => 'AllOforderResp1BillingAddress',
'cart_id' => 'string',
'channel_id' => 'int',
'coupon_discount' => 'string',
'coupons' => '\BigCommerce\OrdersV2\Model\CouponsResource1',
'currency_code' => 'string',
'currency_exchange_rate' => 'string',
'currency_id' => 'int',
'customer_message' => 'string',
'date_created' => 'string',
'date_modified' => 'string',
'date_shipped' => 'string',
'default_currency_code' => 'string',
'default_currency_id' => 'int',
'discount_amount' => 'string',
'ebay_order_id' => 'string',
'external_id' => 'int',
'external_source' => 'string',
'geoip_country' => 'string',
'geoip_country_iso2' => 'string',
'gift_certificate_amount' => 'string',
'handling_cost_ex_tax' => 'string',
'handling_cost_inc_tax' => 'string',
'handling_cost_tax' => 'string',
'handling_cost_tax_class_id' => 'int',
'id' => 'int',
'ip_address' => 'string',
'is_deleted' => 'bool',
'is_email_opt_in' => 'bool',
'items_shipped' => 'float',
'items_total' => 'float',
'order_is_digital' => 'bool',
'order_source' => 'string',
'payment_method' => 'string',
'payment_provider_id' => 'string',
'payment_status' => 'string',
'products' => '\BigCommerce\OrdersV2\Model\ProductsResource1',
'refunded_amount' => 'string',
'shipping_address_count' => 'float',
'shipping_addresses' => '\BigCommerce\OrdersV2\Model\ShippingAddressResource',
'shipping_cost_ex_tax' => 'string',
'shipping_cost_inc_tax' => 'string',
'shipping_cost_tax' => 'string',
'shipping_cost_tax_class_id' => 'int',
'staff_notes' => 'string',
'status' => 'string',
'store_credit_amount' => 'string',
'subtotal_ex_tax' => 'string',
'subtotal_inc_tax' => 'string',
'subtotal_tax' => 'string',
'tax_provider_id' => 'string',
'total_ex_tax' => 'string',
'total_inc_tax' => 'string',
'wrapping_cost_ex_tax' => 'string',
'wrapping_cost_inc_tax' => 'string',
'wrapping_cost_tax' => 'string',
'wrapping_cost_tax_class_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_handling_cost' => null,
'base_shipping_cost' => null,
'base_wrapping_cost' => null,
'billing_address' => null,
'cart_id' => null,
'channel_id' => null,
'coupon_discount' => null,
'coupons' => null,
'currency_code' => null,
'currency_exchange_rate' => null,
'currency_id' => null,
'customer_message' => null,
'date_created' => null,
'date_modified' => null,
'date_shipped' => null,
'default_currency_code' => null,
'default_currency_id' => null,
'discount_amount' => null,
'ebay_order_id' => null,
'external_id' => null,
'external_source' => null,
'geoip_country' => null,
'geoip_country_iso2' => null,
'gift_certificate_amount' => null,
'handling_cost_ex_tax' => null,
'handling_cost_inc_tax' => null,
'handling_cost_tax' => null,
'handling_cost_tax_class_id' => null,
'id' => null,
'ip_address' => null,
'is_deleted' => null,
'is_email_opt_in' => null,
'items_shipped' => null,
'items_total' => null,
'order_is_digital' => null,
'order_source' => null,
'payment_method' => null,
'payment_provider_id' => null,
'payment_status' => null,
'products' => null,
'refunded_amount' => null,
'shipping_address_count' => null,
'shipping_addresses' => null,
'shipping_cost_ex_tax' => null,
'shipping_cost_inc_tax' => null,
'shipping_cost_tax' => null,
'shipping_cost_tax_class_id' => null,
'staff_notes' => null,
'status' => null,
'store_credit_amount' => null,
'subtotal_ex_tax' => null,
'subtotal_inc_tax' => null,
'subtotal_tax' => null,
'tax_provider_id' => null,
'total_ex_tax' => null,
'total_inc_tax' => null,
'wrapping_cost_ex_tax' => null,
'wrapping_cost_inc_tax' => null,
'wrapping_cost_tax' => null,
'wrapping_cost_tax_class_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_handling_cost' => 'base_handling_cost',
'base_shipping_cost' => 'base_shipping_cost',
'base_wrapping_cost' => 'base_wrapping_cost',
'billing_address' => 'billing_address',
'cart_id' => 'cart_id',
'channel_id' => 'channel_id',
'coupon_discount' => 'coupon_discount',
'coupons' => 'coupons',
'currency_code' => 'currency_code',
'currency_exchange_rate' => 'currency_exchange_rate',
'currency_id' => 'currency_id',
'customer_message' => 'customer_message',
'date_created' => 'date_created',
'date_modified' => 'date_modified',
'date_shipped' => 'date_shipped',
'default_currency_code' => 'default_currency_code',
'default_currency_id' => 'default_currency_id',
'discount_amount' => 'discount_amount',
'ebay_order_id' => 'ebay_order_id',
'external_id' => 'external_id',
'external_source' => 'external_source',
'geoip_country' => 'geoip_country',
'geoip_country_iso2' => 'geoip_country_iso2',
'gift_certificate_amount' => 'gift_certificate_amount',
'handling_cost_ex_tax' => 'handling_cost_ex_tax',
'handling_cost_inc_tax' => 'handling_cost_inc_tax',
'handling_cost_tax' => 'handling_cost_tax',
'handling_cost_tax_class_id' => 'handling_cost_tax_class_id',
'id' => 'id',
'ip_address' => 'ip_address',
'is_deleted' => 'is_deleted',
'is_email_opt_in' => 'is_email_opt_in',
'items_shipped' => 'items_shipped',
'items_total' => 'items_total',
'order_is_digital' => 'order_is_digital',
'order_source' => 'order_source',
'payment_method' => 'payment_method',
'payment_provider_id' => 'payment_provider_id',
'payment_status' => 'payment_status',
'products' => 'products',
'refunded_amount' => 'refunded_amount',
'shipping_address_count' => 'shipping_address_count',
'shipping_addresses' => 'shipping_addresses',
'shipping_cost_ex_tax' => 'shipping_cost_ex_tax',
'shipping_cost_inc_tax' => 'shipping_cost_inc_tax',
'shipping_cost_tax' => 'shipping_cost_tax',
'shipping_cost_tax_class_id' => 'shipping_cost_tax_class_id',
'staff_notes' => 'staff_notes',
'status' => 'status',
'store_credit_amount' => 'store_credit_amount',
'subtotal_ex_tax' => 'subtotal_ex_tax',
'subtotal_inc_tax' => 'subtotal_inc_tax',
'subtotal_tax' => 'subtotal_tax',
'tax_provider_id' => 'tax_provider_id',
'total_ex_tax' => 'total_ex_tax',
'total_inc_tax' => 'total_inc_tax',
'wrapping_cost_ex_tax' => 'wrapping_cost_ex_tax',
'wrapping_cost_inc_tax' => 'wrapping_cost_inc_tax',
'wrapping_cost_tax' => 'wrapping_cost_tax',
'wrapping_cost_tax_class_id' => 'wrapping_cost_tax_class_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_handling_cost' => 'setBaseHandlingCost',
'base_shipping_cost' => 'setBaseShippingCost',
'base_wrapping_cost' => 'setBaseWrappingCost',
'billing_address' => 'setBillingAddress',
'cart_id' => 'setCartId',
'channel_id' => 'setChannelId',
'coupon_discount' => 'setCouponDiscount',
'coupons' => 'setCoupons',
'currency_code' => 'setCurrencyCode',
'currency_exchange_rate' => 'setCurrencyExchangeRate',
'currency_id' => 'setCurrencyId',
'customer_message' => 'setCustomerMessage',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified',
'date_shipped' => 'setDateShipped',
'default_currency_code' => 'setDefaultCurrencyCode',
'default_currency_id' => 'setDefaultCurrencyId',
'discount_amount' => 'setDiscountAmount',
'ebay_order_id' => 'setEbayOrderId',
'external_id' => 'setExternalId',
'external_source' => 'setExternalSource',
'geoip_country' => 'setGeoipCountry',
'geoip_country_iso2' => 'setGeoipCountryIso2',
'gift_certificate_amount' => 'setGiftCertificateAmount',
'handling_cost_ex_tax' => 'setHandlingCostExTax',
'handling_cost_inc_tax' => 'setHandlingCostIncTax',
'handling_cost_tax' => 'setHandlingCostTax',
'handling_cost_tax_class_id' => 'setHandlingCostTaxClassId',
'id' => 'setId',
'ip_address' => 'setIpAddress',
'is_deleted' => 'setIsDeleted',
'is_email_opt_in' => 'setIsEmailOptIn',
'items_shipped' => 'setItemsShipped',
'items_total' => 'setItemsTotal',
'order_is_digital' => 'setOrderIsDigital',
'order_source' => 'setOrderSource',
'payment_method' => 'setPaymentMethod',
'payment_provider_id' => 'setPaymentProviderId',
'payment_status' => 'setPaymentStatus',
'products' => 'setProducts',
'refunded_amount' => 'setRefundedAmount',
'shipping_address_count' => 'setShippingAddressCount',
'shipping_addresses' => 'setShippingAddresses',
'shipping_cost_ex_tax' => 'setShippingCostExTax',
'shipping_cost_inc_tax' => 'setShippingCostIncTax',
'shipping_cost_tax' => 'setShippingCostTax',
'shipping_cost_tax_class_id' => 'setShippingCostTaxClassId',
'staff_notes' => 'setStaffNotes',
'status' => 'setStatus',
'store_credit_amount' => 'setStoreCreditAmount',
'subtotal_ex_tax' => 'setSubtotalExTax',
'subtotal_inc_tax' => 'setSubtotalIncTax',
'subtotal_tax' => 'setSubtotalTax',
'tax_provider_id' => 'setTaxProviderId',
'total_ex_tax' => 'setTotalExTax',
'total_inc_tax' => 'setTotalIncTax',
'wrapping_cost_ex_tax' => 'setWrappingCostExTax',
'wrapping_cost_inc_tax' => 'setWrappingCostIncTax',
'wrapping_cost_tax' => 'setWrappingCostTax',
'wrapping_cost_tax_class_id' => 'setWrappingCostTaxClassId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_handling_cost' => 'getBaseHandlingCost',
'base_shipping_cost' => 'getBaseShippingCost',
'base_wrapping_cost' => 'getBaseWrappingCost',
'billing_address' => 'getBillingAddress',
'cart_id' => 'getCartId',
'channel_id' => 'getChannelId',
'coupon_discount' => 'getCouponDiscount',
'coupons' => 'getCoupons',
'currency_code' => 'getCurrencyCode',
'currency_exchange_rate' => 'getCurrencyExchangeRate',
'currency_id' => 'getCurrencyId',
'customer_message' => 'getCustomerMessage',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified',
'date_shipped' => 'getDateShipped',
'default_currency_code' => 'getDefaultCurrencyCode',
'default_currency_id' => 'getDefaultCurrencyId',
'discount_amount' => 'getDiscountAmount',
'ebay_order_id' => 'getEbayOrderId',
'external_id' => 'getExternalId',
'external_source' => 'getExternalSource',
'geoip_country' => 'getGeoipCountry',
'geoip_country_iso2' => 'getGeoipCountryIso2',
'gift_certificate_amount' => 'getGiftCertificateAmount',
'handling_cost_ex_tax' => 'getHandlingCostExTax',
'handling_cost_inc_tax' => 'getHandlingCostIncTax',
'handling_cost_tax' => 'getHandlingCostTax',
'handling_cost_tax_class_id' => 'getHandlingCostTaxClassId',
'id' => 'getId',
'ip_address' => 'getIpAddress',
'is_deleted' => 'getIsDeleted',
'is_email_opt_in' => 'getIsEmailOptIn',
'items_shipped' => 'getItemsShipped',
'items_total' => 'getItemsTotal',
'order_is_digital' => 'getOrderIsDigital',
'order_source' => 'getOrderSource',
'payment_method' => 'getPaymentMethod',
'payment_provider_id' => 'getPaymentProviderId',
'payment_status' => 'getPaymentStatus',
'products' => 'getProducts',
'refunded_amount' => 'getRefundedAmount',
'shipping_address_count' => 'getShippingAddressCount',
'shipping_addresses' => 'getShippingAddresses',
'shipping_cost_ex_tax' => 'getShippingCostExTax',
'shipping_cost_inc_tax' => 'getShippingCostIncTax',
'shipping_cost_tax' => 'getShippingCostTax',
'shipping_cost_tax_class_id' => 'getShippingCostTaxClassId',
'staff_notes' => 'getStaffNotes',
'status' => 'getStatus',
'store_credit_amount' => 'getStoreCreditAmount',
'subtotal_ex_tax' => 'getSubtotalExTax',
'subtotal_inc_tax' => 'getSubtotalIncTax',
'subtotal_tax' => 'getSubtotalTax',
'tax_provider_id' => 'getTaxProviderId',
'total_ex_tax' => 'getTotalExTax',
'total_inc_tax' => 'getTotalIncTax',
'wrapping_cost_ex_tax' => 'getWrappingCostExTax',
'wrapping_cost_inc_tax' => 'getWrappingCostIncTax',
'wrapping_cost_tax' => 'getWrappingCostTax',
'wrapping_cost_tax_class_id' => 'getWrappingCostTaxClassId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_METHOD_CREDIT_CARD = 'Credit Card';
const PAYMENT_METHOD_CASH = 'Cash';
const PAYMENT_METHOD_TEST_PAYMENT_GATEWAY = 'Test Payment Gateway';
const PAYMENT_METHOD_MANUAL = 'Manual';
const TAX_PROVIDER_ID_BASIC_TAX_PROVIDER = 'BasicTaxProvider';
const TAX_PROVIDER_ID_AVA_TAX_PROVIDER = 'AvaTaxProvider';
const TAX_PROVIDER_ID_EMPTY = '';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_CREDIT_CARD,
self::PAYMENT_METHOD_CASH,
self::PAYMENT_METHOD_TEST_PAYMENT_GATEWAY,
self::PAYMENT_METHOD_MANUAL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxProviderIdAllowableValues()
    {
        return [
            self::TAX_PROVIDER_ID_BASIC_TAX_PROVIDER,
self::TAX_PROVIDER_ID_AVA_TAX_PROVIDER,
self::TAX_PROVIDER_ID_EMPTY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_handling_cost'] = isset($data['base_handling_cost']) ? $data['base_handling_cost'] : null;
        $this->container['base_shipping_cost'] = isset($data['base_shipping_cost']) ? $data['base_shipping_cost'] : null;
        $this->container['base_wrapping_cost'] = isset($data['base_wrapping_cost']) ? $data['base_wrapping_cost'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['cart_id'] = isset($data['cart_id']) ? $data['cart_id'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['coupon_discount'] = isset($data['coupon_discount']) ? $data['coupon_discount'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_exchange_rate'] = isset($data['currency_exchange_rate']) ? $data['currency_exchange_rate'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['customer_message'] = isset($data['customer_message']) ? $data['customer_message'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['date_shipped'] = isset($data['date_shipped']) ? $data['date_shipped'] : null;
        $this->container['default_currency_code'] = isset($data['default_currency_code']) ? $data['default_currency_code'] : null;
        $this->container['default_currency_id'] = isset($data['default_currency_id']) ? $data['default_currency_id'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['ebay_order_id'] = isset($data['ebay_order_id']) ? $data['ebay_order_id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['external_source'] = isset($data['external_source']) ? $data['external_source'] : null;
        $this->container['geoip_country'] = isset($data['geoip_country']) ? $data['geoip_country'] : null;
        $this->container['geoip_country_iso2'] = isset($data['geoip_country_iso2']) ? $data['geoip_country_iso2'] : null;
        $this->container['gift_certificate_amount'] = isset($data['gift_certificate_amount']) ? $data['gift_certificate_amount'] : null;
        $this->container['handling_cost_ex_tax'] = isset($data['handling_cost_ex_tax']) ? $data['handling_cost_ex_tax'] : null;
        $this->container['handling_cost_inc_tax'] = isset($data['handling_cost_inc_tax']) ? $data['handling_cost_inc_tax'] : null;
        $this->container['handling_cost_tax'] = isset($data['handling_cost_tax']) ? $data['handling_cost_tax'] : null;
        $this->container['handling_cost_tax_class_id'] = isset($data['handling_cost_tax_class_id']) ? $data['handling_cost_tax_class_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['is_email_opt_in'] = isset($data['is_email_opt_in']) ? $data['is_email_opt_in'] : null;
        $this->container['items_shipped'] = isset($data['items_shipped']) ? $data['items_shipped'] : null;
        $this->container['items_total'] = isset($data['items_total']) ? $data['items_total'] : null;
        $this->container['order_is_digital'] = isset($data['order_is_digital']) ? $data['order_is_digital'] : null;
        $this->container['order_source'] = isset($data['order_source']) ? $data['order_source'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_provider_id'] = isset($data['payment_provider_id']) ? $data['payment_provider_id'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['shipping_address_count'] = isset($data['shipping_address_count']) ? $data['shipping_address_count'] : null;
        $this->container['shipping_addresses'] = isset($data['shipping_addresses']) ? $data['shipping_addresses'] : null;
        $this->container['shipping_cost_ex_tax'] = isset($data['shipping_cost_ex_tax']) ? $data['shipping_cost_ex_tax'] : null;
        $this->container['shipping_cost_inc_tax'] = isset($data['shipping_cost_inc_tax']) ? $data['shipping_cost_inc_tax'] : null;
        $this->container['shipping_cost_tax'] = isset($data['shipping_cost_tax']) ? $data['shipping_cost_tax'] : null;
        $this->container['shipping_cost_tax_class_id'] = isset($data['shipping_cost_tax_class_id']) ? $data['shipping_cost_tax_class_id'] : null;
        $this->container['staff_notes'] = isset($data['staff_notes']) ? $data['staff_notes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['store_credit_amount'] = isset($data['store_credit_amount']) ? $data['store_credit_amount'] : null;
        $this->container['subtotal_ex_tax'] = isset($data['subtotal_ex_tax']) ? $data['subtotal_ex_tax'] : null;
        $this->container['subtotal_inc_tax'] = isset($data['subtotal_inc_tax']) ? $data['subtotal_inc_tax'] : null;
        $this->container['subtotal_tax'] = isset($data['subtotal_tax']) ? $data['subtotal_tax'] : null;
        $this->container['tax_provider_id'] = isset($data['tax_provider_id']) ? $data['tax_provider_id'] : null;
        $this->container['total_ex_tax'] = isset($data['total_ex_tax']) ? $data['total_ex_tax'] : null;
        $this->container['total_inc_tax'] = isset($data['total_inc_tax']) ? $data['total_inc_tax'] : null;
        $this->container['wrapping_cost_ex_tax'] = isset($data['wrapping_cost_ex_tax']) ? $data['wrapping_cost_ex_tax'] : null;
        $this->container['wrapping_cost_inc_tax'] = isset($data['wrapping_cost_inc_tax']) ? $data['wrapping_cost_inc_tax'] : null;
        $this->container['wrapping_cost_tax'] = isset($data['wrapping_cost_tax']) ? $data['wrapping_cost_tax'] : null;
        $this->container['wrapping_cost_tax_class_id'] = isset($data['wrapping_cost_tax_class_id']) ? $data['wrapping_cost_tax_class_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxProviderIdAllowableValues();
        if (!is_null($this->container['tax_provider_id']) && !in_array($this->container['tax_provider_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_provider_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_handling_cost
     *
     * @return string
     */
    public function getBaseHandlingCost()
    {
        return $this->container['base_handling_cost'];
    }

    /**
     * Sets base_handling_cost
     *
     * @param string $base_handling_cost The value of the base handling cost. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBaseHandlingCost($base_handling_cost)
    {
        $this->container['base_handling_cost'] = $base_handling_cost;

        return $this;
    }

    /**
     * Gets base_shipping_cost
     *
     * @return string
     */
    public function getBaseShippingCost()
    {
        return $this->container['base_shipping_cost'];
    }

    /**
     * Sets base_shipping_cost
     *
     * @param string $base_shipping_cost The value of the base shipping cost. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBaseShippingCost($base_shipping_cost)
    {
        $this->container['base_shipping_cost'] = $base_shipping_cost;

        return $this;
    }

    /**
     * Gets base_wrapping_cost
     *
     * @return string
     */
    public function getBaseWrappingCost()
    {
        return $this->container['base_wrapping_cost'];
    }

    /**
     * Sets base_wrapping_cost
     *
     * @param string $base_wrapping_cost The value of the base wrapping cost. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBaseWrappingCost($base_wrapping_cost)
    {
        $this->container['base_wrapping_cost'] = $base_wrapping_cost;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return AllOforderResp1BillingAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param AllOforderResp1BillingAddress $billing_address Required to create an order.
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @return $this
     */
    public function setCartId($cart_id)
    {
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id Shows where the order originated. The channel_id will default to 1.
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets coupon_discount
     *
     * @return string
     */
    public function getCouponDiscount()
    {
        return $this->container['coupon_discount'];
    }

    /**
     * Sets coupon_discount
     *
     * @param string $coupon_discount A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setCouponDiscount($coupon_discount)
    {
        $this->container['coupon_discount'] = $coupon_discount;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return \BigCommerce\OrdersV2\Model\CouponsResource1
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param \BigCommerce\OrdersV2\Model\CouponsResource1 $coupons coupons
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_exchange_rate
     *
     * @return string
     */
    public function getCurrencyExchangeRate()
    {
        return $this->container['currency_exchange_rate'];
    }

    /**
     * Sets currency_exchange_rate
     *
     * @param string $currency_exchange_rate A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setCurrencyExchangeRate($currency_exchange_rate)
    {
        $this->container['currency_exchange_rate'] = $currency_exchange_rate;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id The ID of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets customer_message
     *
     * @return string
     */
    public function getCustomerMessage()
    {
        return $this->container['customer_message'];
    }

    /**
     * Sets customer_message
     *
     * @param string $customer_message Message that the customer entered (number, optional) -o the `Order Comments` box during checkout.
     *
     * @return $this
     */
    public function setCustomerMessage($customer_message)
    {
        $this->container['customer_message'] = $customer_message;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets date_shipped
     *
     * @return string
     */
    public function getDateShipped()
    {
        return $this->container['date_shipped'];
    }

    /**
     * Sets date_shipped
     *
     * @param string $date_shipped A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     *
     * @return $this
     */
    public function setDateShipped($date_shipped)
    {
        $this->container['date_shipped'] = $date_shipped;

        return $this;
    }

    /**
     * Gets default_currency_code
     *
     * @return string
     */
    public function getDefaultCurrencyCode()
    {
        return $this->container['default_currency_code'];
    }

    /**
     * Sets default_currency_code
     *
     * @param string $default_currency_code The currency code of the default currency for this type of transaction; writeable when multi-currency enabled.
     *
     * @return $this
     */
    public function setDefaultCurrencyCode($default_currency_code)
    {
        $this->container['default_currency_code'] = $default_currency_code;

        return $this;
    }

    /**
     * Gets default_currency_id
     *
     * @return int
     */
    public function getDefaultCurrencyId()
    {
        return $this->container['default_currency_id'];
    }

    /**
     * Sets default_currency_id
     *
     * @param int $default_currency_id A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setDefaultCurrencyId($default_currency_id)
    {
        $this->container['default_currency_id'] = $default_currency_id;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return string
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param string $discount_amount Amount of discount for this transaction. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets ebay_order_id
     *
     * @return string
     */
    public function getEbayOrderId()
    {
        return $this->container['ebay_order_id'];
    }

    /**
     * Sets ebay_order_id
     *
     * @param string $ebay_order_id If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
     *
     * @return $this
     */
    public function setEbayOrderId($ebay_order_id)
    {
        $this->container['ebay_order_id'] = $ebay_order_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return int
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param int $external_id ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_source
     *
     * @return string
     */
    public function getExternalSource()
    {
        return $this->container['external_source'];
    }

    /**
     * Sets external_source
     *
     * @param string $external_source For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null.
     *
     * @return $this
     */
    public function setExternalSource($external_source)
    {
        $this->container['external_source'] = $external_source;

        return $this;
    }

    /**
     * Gets geoip_country
     *
     * @return string
     */
    public function getGeoipCountry()
    {
        return $this->container['geoip_country'];
    }

    /**
     * Sets geoip_country
     *
     * @param string $geoip_country The full name of the country where the customer made the purchase, based on the IP.
     *
     * @return $this
     */
    public function setGeoipCountry($geoip_country)
    {
        $this->container['geoip_country'] = $geoip_country;

        return $this;
    }

    /**
     * Gets geoip_country_iso2
     *
     * @return string
     */
    public function getGeoipCountryIso2()
    {
        return $this->container['geoip_country_iso2'];
    }

    /**
     * Sets geoip_country_iso2
     *
     * @param string $geoip_country_iso2 The country where the customer made the purchase, in ISO2 format, based on the IP.
     *
     * @return $this
     */
    public function setGeoipCountryIso2($geoip_country_iso2)
    {
        $this->container['geoip_country_iso2'] = $geoip_country_iso2;

        return $this;
    }

    /**
     * Gets gift_certificate_amount
     *
     * @return string
     */
    public function getGiftCertificateAmount()
    {
        return $this->container['gift_certificate_amount'];
    }

    /**
     * Sets gift_certificate_amount
     *
     * @param string $gift_certificate_amount A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setGiftCertificateAmount($gift_certificate_amount)
    {
        $this->container['gift_certificate_amount'] = $gift_certificate_amount;

        return $this;
    }

    /**
     * Gets handling_cost_ex_tax
     *
     * @return string
     */
    public function getHandlingCostExTax()
    {
        return $this->container['handling_cost_ex_tax'];
    }

    /**
     * Sets handling_cost_ex_tax
     *
     * @param string $handling_cost_ex_tax The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setHandlingCostExTax($handling_cost_ex_tax)
    {
        $this->container['handling_cost_ex_tax'] = $handling_cost_ex_tax;

        return $this;
    }

    /**
     * Gets handling_cost_inc_tax
     *
     * @return string
     */
    public function getHandlingCostIncTax()
    {
        return $this->container['handling_cost_inc_tax'];
    }

    /**
     * Sets handling_cost_inc_tax
     *
     * @param string $handling_cost_inc_tax The value of the handling cost, including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setHandlingCostIncTax($handling_cost_inc_tax)
    {
        $this->container['handling_cost_inc_tax'] = $handling_cost_inc_tax;

        return $this;
    }

    /**
     * Gets handling_cost_tax
     *
     * @return string
     */
    public function getHandlingCostTax()
    {
        return $this->container['handling_cost_tax'];
    }

    /**
     * Sets handling_cost_tax
     *
     * @param string $handling_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setHandlingCostTax($handling_cost_tax)
    {
        $this->container['handling_cost_tax'] = $handling_cost_tax;

        return $this;
    }

    /**
     * Gets handling_cost_tax_class_id
     *
     * @return int
     */
    public function getHandlingCostTaxClassId()
    {
        return $this->container['handling_cost_tax_class_id'];
    }

    /**
     * Sets handling_cost_tax_class_id
     *
     * @param int $handling_cost_tax_class_id A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setHandlingCostTaxClassId($handling_cost_tax_class_id)
    {
        $this->container['handling_cost_tax_class_id'] = $handling_cost_tax_class_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Read-only. The ID of the order.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address IP Address of the customer, if known.
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool $is_deleted Indicates whether the order was deleted (archived). Set to to true, to archive an order.
     *
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_email_opt_in
     *
     * @return bool
     */
    public function getIsEmailOptIn()
    {
        return $this->container['is_email_opt_in'];
    }

    /**
     * Sets is_email_opt_in
     *
     * @param bool $is_email_opt_in Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setIsEmailOptIn($is_email_opt_in)
    {
        $this->container['is_email_opt_in'] = $is_email_opt_in;

        return $this;
    }

    /**
     * Gets items_shipped
     *
     * @return float
     */
    public function getItemsShipped()
    {
        return $this->container['items_shipped'];
    }

    /**
     * Sets items_shipped
     *
     * @param float $items_shipped The number of items that have been shipped.
     *
     * @return $this
     */
    public function setItemsShipped($items_shipped)
    {
        $this->container['items_shipped'] = $items_shipped;

        return $this;
    }

    /**
     * Gets items_total
     *
     * @return float
     */
    public function getItemsTotal()
    {
        return $this->container['items_total'];
    }

    /**
     * Sets items_total
     *
     * @param float $items_total The total number of items in the order.
     *
     * @return $this
     */
    public function setItemsTotal($items_total)
    {
        $this->container['items_total'] = $items_total;

        return $this;
    }

    /**
     * Gets order_is_digital
     *
     * @return bool
     */
    public function getOrderIsDigital()
    {
        return $this->container['order_is_digital'];
    }

    /**
     * Sets order_is_digital
     *
     * @param bool $order_is_digital Whether this is an order for digital products.
     *
     * @return $this
     */
    public function setOrderIsDigital($order_is_digital)
    {
        $this->container['order_is_digital'] = $order_is_digital;

        return $this;
    }

    /**
     * Gets order_source
     *
     * @return string
     */
    public function getOrderSource()
    {
        return $this->container['order_source'];
    }

    /**
     * Sets order_source
     *
     * @param string $order_source Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setOrderSource($order_source)
    {
        $this->container['order_source'] = $order_source;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_provider_id
     *
     * @return string
     */
    public function getPaymentProviderId()
    {
        return $this->container['payment_provider_id'];
    }

    /**
     * Sets payment_provider_id
     *
     * @param string $payment_provider_id The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used).
     *
     * @return $this
     */
    public function setPaymentProviderId($payment_provider_id)
    {
        $this->container['payment_provider_id'] = $payment_provider_id;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \BigCommerce\OrdersV2\Model\ProductsResource1
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \BigCommerce\OrdersV2\Model\ProductsResource1 $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return string
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param string $refunded_amount The amount refunded from this transaction. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets shipping_address_count
     *
     * @return float
     */
    public function getShippingAddressCount()
    {
        return $this->container['shipping_address_count'];
    }

    /**
     * Sets shipping_address_count
     *
     * @param float $shipping_address_count The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setShippingAddressCount($shipping_address_count)
    {
        $this->container['shipping_address_count'] = $shipping_address_count;

        return $this;
    }

    /**
     * Gets shipping_addresses
     *
     * @return \BigCommerce\OrdersV2\Model\ShippingAddressResource
     */
    public function getShippingAddresses()
    {
        return $this->container['shipping_addresses'];
    }

    /**
     * Sets shipping_addresses
     *
     * @param \BigCommerce\OrdersV2\Model\ShippingAddressResource $shipping_addresses shipping_addresses
     *
     * @return $this
     */
    public function setShippingAddresses($shipping_addresses)
    {
        $this->container['shipping_addresses'] = $shipping_addresses;

        return $this;
    }

    /**
     * Gets shipping_cost_ex_tax
     *
     * @return string
     */
    public function getShippingCostExTax()
    {
        return $this->container['shipping_cost_ex_tax'];
    }

    /**
     * Sets shipping_cost_ex_tax
     *
     * @param string $shipping_cost_ex_tax The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setShippingCostExTax($shipping_cost_ex_tax)
    {
        $this->container['shipping_cost_ex_tax'] = $shipping_cost_ex_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_inc_tax
     *
     * @return string
     */
    public function getShippingCostIncTax()
    {
        return $this->container['shipping_cost_inc_tax'];
    }

    /**
     * Sets shipping_cost_inc_tax
     *
     * @param string $shipping_cost_inc_tax The value of shipping cost, including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setShippingCostIncTax($shipping_cost_inc_tax)
    {
        $this->container['shipping_cost_inc_tax'] = $shipping_cost_inc_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_tax
     *
     * @return string
     */
    public function getShippingCostTax()
    {
        return $this->container['shipping_cost_tax'];
    }

    /**
     * Sets shipping_cost_tax
     *
     * @param string $shipping_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setShippingCostTax($shipping_cost_tax)
    {
        $this->container['shipping_cost_tax'] = $shipping_cost_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_tax_class_id
     *
     * @return int
     */
    public function getShippingCostTaxClassId()
    {
        return $this->container['shipping_cost_tax_class_id'];
    }

    /**
     * Sets shipping_cost_tax_class_id
     *
     * @param int $shipping_cost_tax_class_id Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setShippingCostTaxClassId($shipping_cost_tax_class_id)
    {
        $this->container['shipping_cost_tax_class_id'] = $shipping_cost_tax_class_id;

        return $this;
    }

    /**
     * Gets staff_notes
     *
     * @return string
     */
    public function getStaffNotes()
    {
        return $this->container['staff_notes'];
    }

    /**
     * Sets staff_notes
     *
     * @param string $staff_notes Any additional notes for staff.
     *
     * @return $this
     */
    public function setStaffNotes($staff_notes)
    {
        $this->container['staff_notes'] = $staff_notes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets store_credit_amount
     *
     * @return string
     */
    public function getStoreCreditAmount()
    {
        return $this->container['store_credit_amount'];
    }

    /**
     * Sets store_credit_amount
     *
     * @param string $store_credit_amount Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setStoreCreditAmount($store_credit_amount)
    {
        $this->container['store_credit_amount'] = $store_credit_amount;

        return $this;
    }

    /**
     * Gets subtotal_ex_tax
     *
     * @return string
     */
    public function getSubtotalExTax()
    {
        return $this->container['subtotal_ex_tax'];
    }

    /**
     * Sets subtotal_ex_tax
     *
     * @param string $subtotal_ex_tax Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setSubtotalExTax($subtotal_ex_tax)
    {
        $this->container['subtotal_ex_tax'] = $subtotal_ex_tax;

        return $this;
    }

    /**
     * Gets subtotal_inc_tax
     *
     * @return string
     */
    public function getSubtotalIncTax()
    {
        return $this->container['subtotal_inc_tax'];
    }

    /**
     * Sets subtotal_inc_tax
     *
     * @param string $subtotal_inc_tax Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setSubtotalIncTax($subtotal_inc_tax)
    {
        $this->container['subtotal_inc_tax'] = $subtotal_inc_tax;

        return $this;
    }

    /**
     * Gets subtotal_tax
     *
     * @return string
     */
    public function getSubtotalTax()
    {
        return $this->container['subtotal_tax'];
    }

    /**
     * Sets subtotal_tax
     *
     * @param string $subtotal_tax A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setSubtotalTax($subtotal_tax)
    {
        $this->container['subtotal_tax'] = $subtotal_tax;

        return $this;
    }

    /**
     * Gets tax_provider_id
     *
     * @return string
     */
    public function getTaxProviderId()
    {
        return $this->container['tax_provider_id'];
    }

    /**
     * Sets tax_provider_id
     *
     * @param string $tax_provider_id BasicTaxProvider - Tax is set to manual.  AvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.  \"\" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API. This can be set when creating an order using a POST.
     *
     * @return $this
     */
    public function setTaxProviderId($tax_provider_id)
    {
        $allowedValues = $this->getTaxProviderIdAllowableValues();
        if (!is_null($tax_provider_id) && !in_array($tax_provider_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_provider_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_provider_id'] = $tax_provider_id;

        return $this;
    }

    /**
     * Gets total_ex_tax
     *
     * @return string
     */
    public function getTotalExTax()
    {
        return $this->container['total_ex_tax'];
    }

    /**
     * Sets total_ex_tax
     *
     * @param string $total_ex_tax Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setTotalExTax($total_ex_tax)
    {
        $this->container['total_ex_tax'] = $total_ex_tax;

        return $this;
    }

    /**
     * Gets total_inc_tax
     *
     * @return string
     */
    public function getTotalIncTax()
    {
        return $this->container['total_inc_tax'];
    }

    /**
     * Sets total_inc_tax
     *
     * @param string $total_inc_tax Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setTotalIncTax($total_inc_tax)
    {
        $this->container['total_inc_tax'] = $total_inc_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_ex_tax
     *
     * @return string
     */
    public function getWrappingCostExTax()
    {
        return $this->container['wrapping_cost_ex_tax'];
    }

    /**
     * Sets wrapping_cost_ex_tax
     *
     * @param string $wrapping_cost_ex_tax The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostExTax($wrapping_cost_ex_tax)
    {
        $this->container['wrapping_cost_ex_tax'] = $wrapping_cost_ex_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_inc_tax
     *
     * @return string
     */
    public function getWrappingCostIncTax()
    {
        return $this->container['wrapping_cost_inc_tax'];
    }

    /**
     * Sets wrapping_cost_inc_tax
     *
     * @param string $wrapping_cost_inc_tax The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostIncTax($wrapping_cost_inc_tax)
    {
        $this->container['wrapping_cost_inc_tax'] = $wrapping_cost_inc_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_tax
     *
     * @return string
     */
    public function getWrappingCostTax()
    {
        return $this->container['wrapping_cost_tax'];
    }

    /**
     * Sets wrapping_cost_tax
     *
     * @param string $wrapping_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostTax($wrapping_cost_tax)
    {
        $this->container['wrapping_cost_tax'] = $wrapping_cost_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_tax_class_id
     *
     * @return int
     */
    public function getWrappingCostTaxClassId()
    {
        return $this->container['wrapping_cost_tax_class_id'];
    }

    /**
     * Sets wrapping_cost_tax_class_id
     *
     * @param int $wrapping_cost_tax_class_id A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setWrappingCostTaxClassId($wrapping_cost_tax_class_id)
    {
        $this->container['wrapping_cost_tax_class_id'] = $wrapping_cost_tax_class_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
