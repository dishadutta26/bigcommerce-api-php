<?php
/**
 * OrderRespOnly
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V2
 *
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\OrdersV2\Model;

use \ArrayAccess;
use \BigCommerce\OrdersV2\ObjectSerializer;

/**
 * OrderRespOnly Class Doc Comment
 *
 * @category Class
 * @description Properties that are only for order response bodies.
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderRespOnly implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'order_RespOnly';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'date_modified' => 'string',
'date_shipped' => 'string',
'cart_id' => 'string',
'status' => 'string',
'subtotal_tax' => 'string',
'shipping_cost_tax' => 'string',
'shipping_cost_tax_class_id' => 'int',
'handling_cost_tax' => 'string',
'handling_cost_tax_class_id' => 'int',
'wrapping_cost_tax' => 'string',
'wrapping_cost_tax_class_id' => 'int',
'payment_status' => 'string',
'store_credit_amount' => 'string',
'gift_certificate_amount' => 'string',
'currency_id' => 'int',
'currency_code' => 'string',
'currency_exchange_rate' => 'string',
'default_currency_id' => 'int',
'coupon_discount' => 'string',
'shipping_address_count' => 'float',
'is_email_opt_in' => 'bool',
'order_source' => 'string',
'products' => '\BigCommerce\OrdersV2\Model\ProductsResource1',
'shipping_addresses' => '\BigCommerce\OrdersV2\Model\ShippingAddressResource',
'coupons' => '\BigCommerce\OrdersV2\Model\CouponsResource1'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'date_modified' => null,
'date_shipped' => null,
'cart_id' => null,
'status' => null,
'subtotal_tax' => null,
'shipping_cost_tax' => null,
'shipping_cost_tax_class_id' => null,
'handling_cost_tax' => null,
'handling_cost_tax_class_id' => null,
'wrapping_cost_tax' => null,
'wrapping_cost_tax_class_id' => null,
'payment_status' => null,
'store_credit_amount' => null,
'gift_certificate_amount' => null,
'currency_id' => null,
'currency_code' => null,
'currency_exchange_rate' => null,
'default_currency_id' => null,
'coupon_discount' => null,
'shipping_address_count' => null,
'is_email_opt_in' => null,
'order_source' => null,
'products' => null,
'shipping_addresses' => null,
'coupons' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'date_modified' => 'date_modified',
'date_shipped' => 'date_shipped',
'cart_id' => 'cart_id',
'status' => 'status',
'subtotal_tax' => 'subtotal_tax',
'shipping_cost_tax' => 'shipping_cost_tax',
'shipping_cost_tax_class_id' => 'shipping_cost_tax_class_id',
'handling_cost_tax' => 'handling_cost_tax',
'handling_cost_tax_class_id' => 'handling_cost_tax_class_id',
'wrapping_cost_tax' => 'wrapping_cost_tax',
'wrapping_cost_tax_class_id' => 'wrapping_cost_tax_class_id',
'payment_status' => 'payment_status',
'store_credit_amount' => 'store_credit_amount',
'gift_certificate_amount' => 'gift_certificate_amount',
'currency_id' => 'currency_id',
'currency_code' => 'currency_code',
'currency_exchange_rate' => 'currency_exchange_rate',
'default_currency_id' => 'default_currency_id',
'coupon_discount' => 'coupon_discount',
'shipping_address_count' => 'shipping_address_count',
'is_email_opt_in' => 'is_email_opt_in',
'order_source' => 'order_source',
'products' => 'products',
'shipping_addresses' => 'shipping_addresses',
'coupons' => 'coupons'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'date_modified' => 'setDateModified',
'date_shipped' => 'setDateShipped',
'cart_id' => 'setCartId',
'status' => 'setStatus',
'subtotal_tax' => 'setSubtotalTax',
'shipping_cost_tax' => 'setShippingCostTax',
'shipping_cost_tax_class_id' => 'setShippingCostTaxClassId',
'handling_cost_tax' => 'setHandlingCostTax',
'handling_cost_tax_class_id' => 'setHandlingCostTaxClassId',
'wrapping_cost_tax' => 'setWrappingCostTax',
'wrapping_cost_tax_class_id' => 'setWrappingCostTaxClassId',
'payment_status' => 'setPaymentStatus',
'store_credit_amount' => 'setStoreCreditAmount',
'gift_certificate_amount' => 'setGiftCertificateAmount',
'currency_id' => 'setCurrencyId',
'currency_code' => 'setCurrencyCode',
'currency_exchange_rate' => 'setCurrencyExchangeRate',
'default_currency_id' => 'setDefaultCurrencyId',
'coupon_discount' => 'setCouponDiscount',
'shipping_address_count' => 'setShippingAddressCount',
'is_email_opt_in' => 'setIsEmailOptIn',
'order_source' => 'setOrderSource',
'products' => 'setProducts',
'shipping_addresses' => 'setShippingAddresses',
'coupons' => 'setCoupons'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'date_modified' => 'getDateModified',
'date_shipped' => 'getDateShipped',
'cart_id' => 'getCartId',
'status' => 'getStatus',
'subtotal_tax' => 'getSubtotalTax',
'shipping_cost_tax' => 'getShippingCostTax',
'shipping_cost_tax_class_id' => 'getShippingCostTaxClassId',
'handling_cost_tax' => 'getHandlingCostTax',
'handling_cost_tax_class_id' => 'getHandlingCostTaxClassId',
'wrapping_cost_tax' => 'getWrappingCostTax',
'wrapping_cost_tax_class_id' => 'getWrappingCostTaxClassId',
'payment_status' => 'getPaymentStatus',
'store_credit_amount' => 'getStoreCreditAmount',
'gift_certificate_amount' => 'getGiftCertificateAmount',
'currency_id' => 'getCurrencyId',
'currency_code' => 'getCurrencyCode',
'currency_exchange_rate' => 'getCurrencyExchangeRate',
'default_currency_id' => 'getDefaultCurrencyId',
'coupon_discount' => 'getCouponDiscount',
'shipping_address_count' => 'getShippingAddressCount',
'is_email_opt_in' => 'getIsEmailOptIn',
'order_source' => 'getOrderSource',
'products' => 'getProducts',
'shipping_addresses' => 'getShippingAddresses',
'coupons' => 'getCoupons'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['date_shipped'] = isset($data['date_shipped']) ? $data['date_shipped'] : null;
        $this->container['cart_id'] = isset($data['cart_id']) ? $data['cart_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subtotal_tax'] = isset($data['subtotal_tax']) ? $data['subtotal_tax'] : null;
        $this->container['shipping_cost_tax'] = isset($data['shipping_cost_tax']) ? $data['shipping_cost_tax'] : null;
        $this->container['shipping_cost_tax_class_id'] = isset($data['shipping_cost_tax_class_id']) ? $data['shipping_cost_tax_class_id'] : null;
        $this->container['handling_cost_tax'] = isset($data['handling_cost_tax']) ? $data['handling_cost_tax'] : null;
        $this->container['handling_cost_tax_class_id'] = isset($data['handling_cost_tax_class_id']) ? $data['handling_cost_tax_class_id'] : null;
        $this->container['wrapping_cost_tax'] = isset($data['wrapping_cost_tax']) ? $data['wrapping_cost_tax'] : null;
        $this->container['wrapping_cost_tax_class_id'] = isset($data['wrapping_cost_tax_class_id']) ? $data['wrapping_cost_tax_class_id'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['store_credit_amount'] = isset($data['store_credit_amount']) ? $data['store_credit_amount'] : null;
        $this->container['gift_certificate_amount'] = isset($data['gift_certificate_amount']) ? $data['gift_certificate_amount'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_exchange_rate'] = isset($data['currency_exchange_rate']) ? $data['currency_exchange_rate'] : null;
        $this->container['default_currency_id'] = isset($data['default_currency_id']) ? $data['default_currency_id'] : null;
        $this->container['coupon_discount'] = isset($data['coupon_discount']) ? $data['coupon_discount'] : null;
        $this->container['shipping_address_count'] = isset($data['shipping_address_count']) ? $data['shipping_address_count'] : null;
        $this->container['is_email_opt_in'] = isset($data['is_email_opt_in']) ? $data['is_email_opt_in'] : null;
        $this->container['order_source'] = isset($data['order_source']) ? $data['order_source'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['shipping_addresses'] = isset($data['shipping_addresses']) ? $data['shipping_addresses'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Read-only. The ID of the order.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets date_shipped
     *
     * @return string
     */
    public function getDateShipped()
    {
        return $this->container['date_shipped'];
    }

    /**
     * Sets date_shipped
     *
     * @param string $date_shipped A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     *
     * @return $this
     */
    public function setDateShipped($date_shipped)
    {
        $this->container['date_shipped'] = $date_shipped;

        return $this;
    }

    /**
     * Gets cart_id
     *
     * @return string
     */
    public function getCartId()
    {
        return $this->container['cart_id'];
    }

    /**
     * Sets cart_id
     *
     * @param string $cart_id The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     * @return $this
     */
    public function setCartId($cart_id)
    {
        $this->container['cart_id'] = $cart_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subtotal_tax
     *
     * @return string
     */
    public function getSubtotalTax()
    {
        return $this->container['subtotal_tax'];
    }

    /**
     * Sets subtotal_tax
     *
     * @param string $subtotal_tax A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setSubtotalTax($subtotal_tax)
    {
        $this->container['subtotal_tax'] = $subtotal_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_tax
     *
     * @return string
     */
    public function getShippingCostTax()
    {
        return $this->container['shipping_cost_tax'];
    }

    /**
     * Sets shipping_cost_tax
     *
     * @param string $shipping_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setShippingCostTax($shipping_cost_tax)
    {
        $this->container['shipping_cost_tax'] = $shipping_cost_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_tax_class_id
     *
     * @return int
     */
    public function getShippingCostTaxClassId()
    {
        return $this->container['shipping_cost_tax_class_id'];
    }

    /**
     * Sets shipping_cost_tax_class_id
     *
     * @param int $shipping_cost_tax_class_id Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setShippingCostTaxClassId($shipping_cost_tax_class_id)
    {
        $this->container['shipping_cost_tax_class_id'] = $shipping_cost_tax_class_id;

        return $this;
    }

    /**
     * Gets handling_cost_tax
     *
     * @return string
     */
    public function getHandlingCostTax()
    {
        return $this->container['handling_cost_tax'];
    }

    /**
     * Sets handling_cost_tax
     *
     * @param string $handling_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setHandlingCostTax($handling_cost_tax)
    {
        $this->container['handling_cost_tax'] = $handling_cost_tax;

        return $this;
    }

    /**
     * Gets handling_cost_tax_class_id
     *
     * @return int
     */
    public function getHandlingCostTaxClassId()
    {
        return $this->container['handling_cost_tax_class_id'];
    }

    /**
     * Sets handling_cost_tax_class_id
     *
     * @param int $handling_cost_tax_class_id A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setHandlingCostTaxClassId($handling_cost_tax_class_id)
    {
        $this->container['handling_cost_tax_class_id'] = $handling_cost_tax_class_id;

        return $this;
    }

    /**
     * Gets wrapping_cost_tax
     *
     * @return string
     */
    public function getWrappingCostTax()
    {
        return $this->container['wrapping_cost_tax'];
    }

    /**
     * Sets wrapping_cost_tax
     *
     * @param string $wrapping_cost_tax A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostTax($wrapping_cost_tax)
    {
        $this->container['wrapping_cost_tax'] = $wrapping_cost_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_tax_class_id
     *
     * @return int
     */
    public function getWrappingCostTaxClassId()
    {
        return $this->container['wrapping_cost_tax_class_id'];
    }

    /**
     * Sets wrapping_cost_tax_class_id
     *
     * @param int $wrapping_cost_tax_class_id A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     *
     * @return $this
     */
    public function setWrappingCostTaxClassId($wrapping_cost_tax_class_id)
    {
        $this->container['wrapping_cost_tax_class_id'] = $wrapping_cost_tax_class_id;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets store_credit_amount
     *
     * @return string
     */
    public function getStoreCreditAmount()
    {
        return $this->container['store_credit_amount'];
    }

    /**
     * Sets store_credit_amount
     *
     * @param string $store_credit_amount Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setStoreCreditAmount($store_credit_amount)
    {
        $this->container['store_credit_amount'] = $store_credit_amount;

        return $this;
    }

    /**
     * Gets gift_certificate_amount
     *
     * @return string
     */
    public function getGiftCertificateAmount()
    {
        return $this->container['gift_certificate_amount'];
    }

    /**
     * Sets gift_certificate_amount
     *
     * @param string $gift_certificate_amount A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setGiftCertificateAmount($gift_certificate_amount)
    {
        $this->container['gift_certificate_amount'] = $gift_certificate_amount;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id The ID of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_exchange_rate
     *
     * @return string
     */
    public function getCurrencyExchangeRate()
    {
        return $this->container['currency_exchange_rate'];
    }

    /**
     * Sets currency_exchange_rate
     *
     * @param string $currency_exchange_rate A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setCurrencyExchangeRate($currency_exchange_rate)
    {
        $this->container['currency_exchange_rate'] = $currency_exchange_rate;

        return $this;
    }

    /**
     * Gets default_currency_id
     *
     * @return int
     */
    public function getDefaultCurrencyId()
    {
        return $this->container['default_currency_id'];
    }

    /**
     * Sets default_currency_id
     *
     * @param int $default_currency_id A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setDefaultCurrencyId($default_currency_id)
    {
        $this->container['default_currency_id'] = $default_currency_id;

        return $this;
    }

    /**
     * Gets coupon_discount
     *
     * @return string
     */
    public function getCouponDiscount()
    {
        return $this->container['coupon_discount'];
    }

    /**
     * Sets coupon_discount
     *
     * @param string $coupon_discount A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setCouponDiscount($coupon_discount)
    {
        $this->container['coupon_discount'] = $coupon_discount;

        return $this;
    }

    /**
     * Gets shipping_address_count
     *
     * @return float
     */
    public function getShippingAddressCount()
    {
        return $this->container['shipping_address_count'];
    }

    /**
     * Sets shipping_address_count
     *
     * @param float $shipping_address_count The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setShippingAddressCount($shipping_address_count)
    {
        $this->container['shipping_address_count'] = $shipping_address_count;

        return $this;
    }

    /**
     * Gets is_email_opt_in
     *
     * @return bool
     */
    public function getIsEmailOptIn()
    {
        return $this->container['is_email_opt_in'];
    }

    /**
     * Sets is_email_opt_in
     *
     * @param bool $is_email_opt_in Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setIsEmailOptIn($is_email_opt_in)
    {
        $this->container['is_email_opt_in'] = $is_email_opt_in;

        return $this;
    }

    /**
     * Gets order_source
     *
     * @return string
     */
    public function getOrderSource()
    {
        return $this->container['order_source'];
    }

    /**
     * Sets order_source
     *
     * @param string $order_source Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.
     *
     * @return $this
     */
    public function setOrderSource($order_source)
    {
        $this->container['order_source'] = $order_source;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \BigCommerce\OrdersV2\Model\ProductsResource1
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \BigCommerce\OrdersV2\Model\ProductsResource1 $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets shipping_addresses
     *
     * @return \BigCommerce\OrdersV2\Model\ShippingAddressResource
     */
    public function getShippingAddresses()
    {
        return $this->container['shipping_addresses'];
    }

    /**
     * Sets shipping_addresses
     *
     * @param \BigCommerce\OrdersV2\Model\ShippingAddressResource $shipping_addresses shipping_addresses
     *
     * @return $this
     */
    public function setShippingAddresses($shipping_addresses)
    {
        $this->container['shipping_addresses'] = $shipping_addresses;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return \BigCommerce\OrdersV2\Model\CouponsResource1
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param \BigCommerce\OrdersV2\Model\CouponsResource1 $coupons coupons
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
