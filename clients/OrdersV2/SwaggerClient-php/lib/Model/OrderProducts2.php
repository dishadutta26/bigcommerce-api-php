<?php
/**
 * OrderProducts2
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V2
 *
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\OrdersV2\Model;

use \ArrayAccess;
use \BigCommerce\OrdersV2\ObjectSerializer;

/**
 * OrderProducts2 Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderProducts2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderProducts_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'order_id' => 'int',
'product_id' => 'int',
'order_address_id' => 'int',
'name' => 'string',
'sku' => 'string',
'type' => 'string',
'base_price' => 'string',
'price_ex_tax' => 'string',
'price_inc_tax' => 'string',
'price_tax' => 'string',
'base_total' => 'string',
'total_ex_tax' => 'string',
'total_inc_tax' => 'string',
'total_tax' => 'string',
'quantity' => 'float',
'base_cost_price' => 'string',
'cost_price_inc_tax' => 'string',
'cost_price_ex_tax' => 'string',
'weight' => 'float',
'cost_price_tax' => 'string',
'is_refunded' => 'bool',
'refunded_amount' => 'string',
'return_id' => 'float',
'wrapping_name' => 'string',
'base_wrapping_cost' => 'string',
'wrapping_cost_ex_tax' => 'string',
'wrapping_cost_inc_tax' => 'string',
'wrapping_cost_tax' => 'string',
'wrapping_message' => 'string',
'quantity_shipped' => 'float',
'event_name' => 'string',
'event_date' => '\DateTime',
'fixed_shipping_cost' => 'string',
'ebay_item_id' => 'string',
'ebay_transaction_id' => 'string',
'option_set_id' => 'int',
'parent_order_product_id' => 'int',
'is_bundled_product' => 'bool',
'bin_picking_number' => 'string',
'applied_discounts' => '\BigCommerce\OrdersV2\Model\OrderProductAppliedDiscounts1[]',
'product_options' => '\BigCommerce\OrdersV2\Model\OrderProductOptions1[]',
'external_id' => 'int',
'upc' => 'string',
'variant_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'order_id' => null,
'product_id' => null,
'order_address_id' => null,
'name' => null,
'sku' => null,
'type' => null,
'base_price' => null,
'price_ex_tax' => null,
'price_inc_tax' => null,
'price_tax' => null,
'base_total' => null,
'total_ex_tax' => null,
'total_inc_tax' => null,
'total_tax' => null,
'quantity' => null,
'base_cost_price' => null,
'cost_price_inc_tax' => null,
'cost_price_ex_tax' => null,
'weight' => null,
'cost_price_tax' => null,
'is_refunded' => null,
'refunded_amount' => null,
'return_id' => null,
'wrapping_name' => null,
'base_wrapping_cost' => null,
'wrapping_cost_ex_tax' => null,
'wrapping_cost_inc_tax' => null,
'wrapping_cost_tax' => null,
'wrapping_message' => null,
'quantity_shipped' => null,
'event_name' => null,
'event_date' => 'date',
'fixed_shipping_cost' => null,
'ebay_item_id' => null,
'ebay_transaction_id' => null,
'option_set_id' => null,
'parent_order_product_id' => null,
'is_bundled_product' => null,
'bin_picking_number' => null,
'applied_discounts' => null,
'product_options' => null,
'external_id' => null,
'upc' => null,
'variant_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'order_id' => 'order_id',
'product_id' => 'product_id',
'order_address_id' => 'order_address_id',
'name' => 'name',
'sku' => 'sku',
'type' => 'type',
'base_price' => 'base_price',
'price_ex_tax' => 'price_ex_tax',
'price_inc_tax' => 'price_inc_tax',
'price_tax' => 'price_tax',
'base_total' => 'base_total',
'total_ex_tax' => 'total_ex_tax',
'total_inc_tax' => 'total_inc_tax',
'total_tax' => 'total_tax',
'quantity' => 'quantity',
'base_cost_price' => 'base_cost_price',
'cost_price_inc_tax' => 'cost_price_inc_tax',
'cost_price_ex_tax' => 'cost_price_ex_tax',
'weight' => 'weight',
'cost_price_tax' => 'cost_price_tax',
'is_refunded' => 'is_refunded',
'refunded_amount' => 'refunded_amount',
'return_id' => 'return_id',
'wrapping_name' => 'wrapping_name',
'base_wrapping_cost' => 'base_wrapping_cost',
'wrapping_cost_ex_tax' => 'wrapping_cost_ex_tax',
'wrapping_cost_inc_tax' => 'wrapping_cost_inc_tax',
'wrapping_cost_tax' => 'wrapping_cost_tax',
'wrapping_message' => 'wrapping_message',
'quantity_shipped' => 'quantity_shipped',
'event_name' => 'event_name',
'event_date' => 'event_date',
'fixed_shipping_cost' => 'fixed_shipping_cost',
'ebay_item_id' => 'ebay_item_id',
'ebay_transaction_id' => 'ebay_transaction_id',
'option_set_id' => 'option_set_id',
'parent_order_product_id' => 'parent_order_product_id',
'is_bundled_product' => 'is_bundled_product',
'bin_picking_number' => 'bin_picking_number',
'applied_discounts' => 'applied_discounts',
'product_options' => 'product_options',
'external_id' => 'external_id',
'upc' => 'upc',
'variant_id' => 'variant_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'order_id' => 'setOrderId',
'product_id' => 'setProductId',
'order_address_id' => 'setOrderAddressId',
'name' => 'setName',
'sku' => 'setSku',
'type' => 'setType',
'base_price' => 'setBasePrice',
'price_ex_tax' => 'setPriceExTax',
'price_inc_tax' => 'setPriceIncTax',
'price_tax' => 'setPriceTax',
'base_total' => 'setBaseTotal',
'total_ex_tax' => 'setTotalExTax',
'total_inc_tax' => 'setTotalIncTax',
'total_tax' => 'setTotalTax',
'quantity' => 'setQuantity',
'base_cost_price' => 'setBaseCostPrice',
'cost_price_inc_tax' => 'setCostPriceIncTax',
'cost_price_ex_tax' => 'setCostPriceExTax',
'weight' => 'setWeight',
'cost_price_tax' => 'setCostPriceTax',
'is_refunded' => 'setIsRefunded',
'refunded_amount' => 'setRefundedAmount',
'return_id' => 'setReturnId',
'wrapping_name' => 'setWrappingName',
'base_wrapping_cost' => 'setBaseWrappingCost',
'wrapping_cost_ex_tax' => 'setWrappingCostExTax',
'wrapping_cost_inc_tax' => 'setWrappingCostIncTax',
'wrapping_cost_tax' => 'setWrappingCostTax',
'wrapping_message' => 'setWrappingMessage',
'quantity_shipped' => 'setQuantityShipped',
'event_name' => 'setEventName',
'event_date' => 'setEventDate',
'fixed_shipping_cost' => 'setFixedShippingCost',
'ebay_item_id' => 'setEbayItemId',
'ebay_transaction_id' => 'setEbayTransactionId',
'option_set_id' => 'setOptionSetId',
'parent_order_product_id' => 'setParentOrderProductId',
'is_bundled_product' => 'setIsBundledProduct',
'bin_picking_number' => 'setBinPickingNumber',
'applied_discounts' => 'setAppliedDiscounts',
'product_options' => 'setProductOptions',
'external_id' => 'setExternalId',
'upc' => 'setUpc',
'variant_id' => 'setVariantId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'order_id' => 'getOrderId',
'product_id' => 'getProductId',
'order_address_id' => 'getOrderAddressId',
'name' => 'getName',
'sku' => 'getSku',
'type' => 'getType',
'base_price' => 'getBasePrice',
'price_ex_tax' => 'getPriceExTax',
'price_inc_tax' => 'getPriceIncTax',
'price_tax' => 'getPriceTax',
'base_total' => 'getBaseTotal',
'total_ex_tax' => 'getTotalExTax',
'total_inc_tax' => 'getTotalIncTax',
'total_tax' => 'getTotalTax',
'quantity' => 'getQuantity',
'base_cost_price' => 'getBaseCostPrice',
'cost_price_inc_tax' => 'getCostPriceIncTax',
'cost_price_ex_tax' => 'getCostPriceExTax',
'weight' => 'getWeight',
'cost_price_tax' => 'getCostPriceTax',
'is_refunded' => 'getIsRefunded',
'refunded_amount' => 'getRefundedAmount',
'return_id' => 'getReturnId',
'wrapping_name' => 'getWrappingName',
'base_wrapping_cost' => 'getBaseWrappingCost',
'wrapping_cost_ex_tax' => 'getWrappingCostExTax',
'wrapping_cost_inc_tax' => 'getWrappingCostIncTax',
'wrapping_cost_tax' => 'getWrappingCostTax',
'wrapping_message' => 'getWrappingMessage',
'quantity_shipped' => 'getQuantityShipped',
'event_name' => 'getEventName',
'event_date' => 'getEventDate',
'fixed_shipping_cost' => 'getFixedShippingCost',
'ebay_item_id' => 'getEbayItemId',
'ebay_transaction_id' => 'getEbayTransactionId',
'option_set_id' => 'getOptionSetId',
'parent_order_product_id' => 'getParentOrderProductId',
'is_bundled_product' => 'getIsBundledProduct',
'bin_picking_number' => 'getBinPickingNumber',
'applied_discounts' => 'getAppliedDiscounts',
'product_options' => 'getProductOptions',
'external_id' => 'getExternalId',
'upc' => 'getUpc',
'variant_id' => 'getVariantId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PHYSICAL = 'physical';
const TYPE_DIGITAL = 'digital';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PHYSICAL,
self::TYPE_DIGITAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['order_address_id'] = isset($data['order_address_id']) ? $data['order_address_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['base_price'] = isset($data['base_price']) ? $data['base_price'] : null;
        $this->container['price_ex_tax'] = isset($data['price_ex_tax']) ? $data['price_ex_tax'] : null;
        $this->container['price_inc_tax'] = isset($data['price_inc_tax']) ? $data['price_inc_tax'] : null;
        $this->container['price_tax'] = isset($data['price_tax']) ? $data['price_tax'] : null;
        $this->container['base_total'] = isset($data['base_total']) ? $data['base_total'] : null;
        $this->container['total_ex_tax'] = isset($data['total_ex_tax']) ? $data['total_ex_tax'] : null;
        $this->container['total_inc_tax'] = isset($data['total_inc_tax']) ? $data['total_inc_tax'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['base_cost_price'] = isset($data['base_cost_price']) ? $data['base_cost_price'] : null;
        $this->container['cost_price_inc_tax'] = isset($data['cost_price_inc_tax']) ? $data['cost_price_inc_tax'] : null;
        $this->container['cost_price_ex_tax'] = isset($data['cost_price_ex_tax']) ? $data['cost_price_ex_tax'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['cost_price_tax'] = isset($data['cost_price_tax']) ? $data['cost_price_tax'] : null;
        $this->container['is_refunded'] = isset($data['is_refunded']) ? $data['is_refunded'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['return_id'] = isset($data['return_id']) ? $data['return_id'] : null;
        $this->container['wrapping_name'] = isset($data['wrapping_name']) ? $data['wrapping_name'] : null;
        $this->container['base_wrapping_cost'] = isset($data['base_wrapping_cost']) ? $data['base_wrapping_cost'] : null;
        $this->container['wrapping_cost_ex_tax'] = isset($data['wrapping_cost_ex_tax']) ? $data['wrapping_cost_ex_tax'] : null;
        $this->container['wrapping_cost_inc_tax'] = isset($data['wrapping_cost_inc_tax']) ? $data['wrapping_cost_inc_tax'] : null;
        $this->container['wrapping_cost_tax'] = isset($data['wrapping_cost_tax']) ? $data['wrapping_cost_tax'] : null;
        $this->container['wrapping_message'] = isset($data['wrapping_message']) ? $data['wrapping_message'] : null;
        $this->container['quantity_shipped'] = isset($data['quantity_shipped']) ? $data['quantity_shipped'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_date'] = isset($data['event_date']) ? $data['event_date'] : null;
        $this->container['fixed_shipping_cost'] = isset($data['fixed_shipping_cost']) ? $data['fixed_shipping_cost'] : null;
        $this->container['ebay_item_id'] = isset($data['ebay_item_id']) ? $data['ebay_item_id'] : null;
        $this->container['ebay_transaction_id'] = isset($data['ebay_transaction_id']) ? $data['ebay_transaction_id'] : null;
        $this->container['option_set_id'] = isset($data['option_set_id']) ? $data['option_set_id'] : null;
        $this->container['parent_order_product_id'] = isset($data['parent_order_product_id']) ? $data['parent_order_product_id'] : null;
        $this->container['is_bundled_product'] = isset($data['is_bundled_product']) ? $data['is_bundled_product'] : null;
        $this->container['bin_picking_number'] = isset($data['bin_picking_number']) ? $data['bin_picking_number'] : null;
        $this->container['applied_discounts'] = isset($data['applied_discounts']) ? $data['applied_discounts'] : null;
        $this->container['product_options'] = isset($data['product_options']) ? $data['product_options'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['variant_id'] = isset($data['variant_id']) ? $data['variant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Numeric ID of this product within this order.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Numeric ID of the associated order.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id Numeric ID of the product.
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets order_address_id
     *
     * @return int
     */
    public function getOrderAddressId()
    {
        return $this->container['order_address_id'];
    }

    /**
     * Sets order_address_id
     *
     * @param int $order_address_id Numeric ID of the associated order address.
     *
     * @return $this
     */
    public function setOrderAddressId($order_address_id)
    {
        $this->container['order_address_id'] = $order_address_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The product name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku User-defined product code/stock keeping unit (SKU).
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of product
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets base_price
     *
     * @return string
     */
    public function getBasePrice()
    {
        return $this->container['base_price'];
    }

    /**
     * Sets base_price
     *
     * @param string $base_price The product's base price. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBasePrice($base_price)
    {
        $this->container['base_price'] = $base_price;

        return $this;
    }

    /**
     * Gets price_ex_tax
     *
     * @return string
     */
    public function getPriceExTax()
    {
        return $this->container['price_ex_tax'];
    }

    /**
     * Sets price_ex_tax
     *
     * @param string $price_ex_tax The product’s price excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setPriceExTax($price_ex_tax)
    {
        $this->container['price_ex_tax'] = $price_ex_tax;

        return $this;
    }

    /**
     * Gets price_inc_tax
     *
     * @return string
     */
    public function getPriceIncTax()
    {
        return $this->container['price_inc_tax'];
    }

    /**
     * Sets price_inc_tax
     *
     * @param string $price_inc_tax The product’s price including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setPriceIncTax($price_inc_tax)
    {
        $this->container['price_inc_tax'] = $price_inc_tax;

        return $this;
    }

    /**
     * Gets price_tax
     *
     * @return string
     */
    public function getPriceTax()
    {
        return $this->container['price_tax'];
    }

    /**
     * Sets price_tax
     *
     * @param string $price_tax Amount of tax applied to a single product.  Price tax is calculated as: `price_tax = price_inc_tax - price_ex_tax`  (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setPriceTax($price_tax)
    {
        $this->container['price_tax'] = $price_tax;

        return $this;
    }

    /**
     * Gets base_total
     *
     * @return string
     */
    public function getBaseTotal()
    {
        return $this->container['base_total'];
    }

    /**
     * Sets base_total
     *
     * @param string $base_total Total base price. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBaseTotal($base_total)
    {
        $this->container['base_total'] = $base_total;

        return $this;
    }

    /**
     * Gets total_ex_tax
     *
     * @return string
     */
    public function getTotalExTax()
    {
        return $this->container['total_ex_tax'];
    }

    /**
     * Sets total_ex_tax
     *
     * @param string $total_ex_tax Total base price excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setTotalExTax($total_ex_tax)
    {
        $this->container['total_ex_tax'] = $total_ex_tax;

        return $this;
    }

    /**
     * Gets total_inc_tax
     *
     * @return string
     */
    public function getTotalIncTax()
    {
        return $this->container['total_inc_tax'];
    }

    /**
     * Sets total_inc_tax
     *
     * @param string $total_inc_tax Total base price including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setTotalIncTax($total_inc_tax)
    {
        $this->container['total_inc_tax'] = $total_inc_tax;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return string
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param string $total_tax Total tax applied to products. For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.  If there is a manual discount applied total_tax is calcuted as the following: `(price_ex_tax - discount)*tax_rate=total_tax`. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Quantity of the product ordered.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets base_cost_price
     *
     * @return string
     */
    public function getBaseCostPrice()
    {
        return $this->container['base_cost_price'];
    }

    /**
     * Sets base_cost_price
     *
     * @param string $base_cost_price The product's cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer) Read Only
     *
     * @return $this
     */
    public function setBaseCostPrice($base_cost_price)
    {
        $this->container['base_cost_price'] = $base_cost_price;

        return $this;
    }

    /**
     * Gets cost_price_inc_tax
     *
     * @return string
     */
    public function getCostPriceIncTax()
    {
        return $this->container['cost_price_inc_tax'];
    }

    /**
     * Sets cost_price_inc_tax
     *
     * @param string $cost_price_inc_tax The product's cost price including tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
     *
     * @return $this
     */
    public function setCostPriceIncTax($cost_price_inc_tax)
    {
        $this->container['cost_price_inc_tax'] = $cost_price_inc_tax;

        return $this;
    }

    /**
     * Gets cost_price_ex_tax
     *
     * @return string
     */
    public function getCostPriceExTax()
    {
        return $this->container['cost_price_ex_tax'];
    }

    /**
     * Sets cost_price_ex_tax
     *
     * @param string $cost_price_ex_tax The products cost price excluding tax. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
     *
     * @return $this
     */
    public function setCostPriceExTax($cost_price_ex_tax)
    {
        $this->container['cost_price_ex_tax'] = $cost_price_ex_tax;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight Weight of the product. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets cost_price_tax
     *
     * @return string
     */
    public function getCostPriceTax()
    {
        return $this->container['cost_price_tax'];
    }

    /**
     * Sets cost_price_tax
     *
     * @param string $cost_price_tax Tax applied to the product’s cost price. (Float, Float-As-String, Integer) The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
     *
     * @return $this
     */
    public function setCostPriceTax($cost_price_tax)
    {
        $this->container['cost_price_tax'] = $cost_price_tax;

        return $this;
    }

    /**
     * Gets is_refunded
     *
     * @return bool
     */
    public function getIsRefunded()
    {
        return $this->container['is_refunded'];
    }

    /**
     * Sets is_refunded
     *
     * @param bool $is_refunded Whether the product has been refunded.
     *
     * @return $this
     */
    public function setIsRefunded($is_refunded)
    {
        $this->container['is_refunded'] = $is_refunded;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return string
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param string $refunded_amount The amount refunded from this transaction. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets return_id
     *
     * @return float
     */
    public function getReturnId()
    {
        return $this->container['return_id'];
    }

    /**
     * Sets return_id
     *
     * @param float $return_id Numeric ID for the refund.
     *
     * @return $this
     */
    public function setReturnId($return_id)
    {
        $this->container['return_id'] = $return_id;

        return $this;
    }

    /**
     * Gets wrapping_name
     *
     * @return string
     */
    public function getWrappingName()
    {
        return $this->container['wrapping_name'];
    }

    /**
     * Sets wrapping_name
     *
     * @param string $wrapping_name Name of gift-wrapping option
     *
     * @return $this
     */
    public function setWrappingName($wrapping_name)
    {
        $this->container['wrapping_name'] = $wrapping_name;

        return $this;
    }

    /**
     * Gets base_wrapping_cost
     *
     * @return string
     */
    public function getBaseWrappingCost()
    {
        return $this->container['base_wrapping_cost'];
    }

    /**
     * Sets base_wrapping_cost
     *
     * @param string $base_wrapping_cost The value of the base wrapping cost. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setBaseWrappingCost($base_wrapping_cost)
    {
        $this->container['base_wrapping_cost'] = $base_wrapping_cost;

        return $this;
    }

    /**
     * Gets wrapping_cost_ex_tax
     *
     * @return string
     */
    public function getWrappingCostExTax()
    {
        return $this->container['wrapping_cost_ex_tax'];
    }

    /**
     * Sets wrapping_cost_ex_tax
     *
     * @param string $wrapping_cost_ex_tax The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostExTax($wrapping_cost_ex_tax)
    {
        $this->container['wrapping_cost_ex_tax'] = $wrapping_cost_ex_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_inc_tax
     *
     * @return string
     */
    public function getWrappingCostIncTax()
    {
        return $this->container['wrapping_cost_inc_tax'];
    }

    /**
     * Sets wrapping_cost_inc_tax
     *
     * @param string $wrapping_cost_inc_tax The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostIncTax($wrapping_cost_inc_tax)
    {
        $this->container['wrapping_cost_inc_tax'] = $wrapping_cost_inc_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_tax
     *
     * @return string
     */
    public function getWrappingCostTax()
    {
        return $this->container['wrapping_cost_tax'];
    }

    /**
     * Sets wrapping_cost_tax
     *
     * @param string $wrapping_cost_tax Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setWrappingCostTax($wrapping_cost_tax)
    {
        $this->container['wrapping_cost_tax'] = $wrapping_cost_tax;

        return $this;
    }

    /**
     * Gets wrapping_message
     *
     * @return string
     */
    public function getWrappingMessage()
    {
        return $this->container['wrapping_message'];
    }

    /**
     * Sets wrapping_message
     *
     * @param string $wrapping_message Message to accompany gift-wrapping option.
     *
     * @return $this
     */
    public function setWrappingMessage($wrapping_message)
    {
        $this->container['wrapping_message'] = $wrapping_message;

        return $this;
    }

    /**
     * Gets quantity_shipped
     *
     * @return float
     */
    public function getQuantityShipped()
    {
        return $this->container['quantity_shipped'];
    }

    /**
     * Sets quantity_shipped
     *
     * @param float $quantity_shipped Quantity of this item shipped.
     *
     * @return $this
     */
    public function setQuantityShipped($quantity_shipped)
    {
        $this->container['quantity_shipped'] = $quantity_shipped;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name Name of promotional event/delivery date.
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_date
     *
     * @return \DateTime
     */
    public function getEventDate()
    {
        return $this->container['event_date'];
    }

    /**
     * Sets event_date
     *
     * @param \DateTime $event_date Date of the promotional event/scheduled delivery.
     *
     * @return $this
     */
    public function setEventDate($event_date)
    {
        $this->container['event_date'] = $event_date;

        return $this;
    }

    /**
     * Gets fixed_shipping_cost
     *
     * @return string
     */
    public function getFixedShippingCost()
    {
        return $this->container['fixed_shipping_cost'];
    }

    /**
     * Sets fixed_shipping_cost
     *
     * @param string $fixed_shipping_cost Fixed shipping cost for this product. (Float, Float-As-String, Integer)
     *
     * @return $this
     */
    public function setFixedShippingCost($fixed_shipping_cost)
    {
        $this->container['fixed_shipping_cost'] = $fixed_shipping_cost;

        return $this;
    }

    /**
     * Gets ebay_item_id
     *
     * @return string
     */
    public function getEbayItemId()
    {
        return $this->container['ebay_item_id'];
    }

    /**
     * Sets ebay_item_id
     *
     * @param string $ebay_item_id Item ID for this product on eBay.
     *
     * @return $this
     */
    public function setEbayItemId($ebay_item_id)
    {
        $this->container['ebay_item_id'] = $ebay_item_id;

        return $this;
    }

    /**
     * Gets ebay_transaction_id
     *
     * @return string
     */
    public function getEbayTransactionId()
    {
        return $this->container['ebay_transaction_id'];
    }

    /**
     * Sets ebay_transaction_id
     *
     * @param string $ebay_transaction_id Transaction ID for this product on eBay.
     *
     * @return $this
     */
    public function setEbayTransactionId($ebay_transaction_id)
    {
        $this->container['ebay_transaction_id'] = $ebay_transaction_id;

        return $this;
    }

    /**
     * Gets option_set_id
     *
     * @return int
     */
    public function getOptionSetId()
    {
        return $this->container['option_set_id'];
    }

    /**
     * Sets option_set_id
     *
     * @param int $option_set_id Numeric ID of the option set applied to the product.
     *
     * @return $this
     */
    public function setOptionSetId($option_set_id)
    {
        $this->container['option_set_id'] = $option_set_id;

        return $this;
    }

    /**
     * Gets parent_order_product_id
     *
     * @return int
     */
    public function getParentOrderProductId()
    {
        return $this->container['parent_order_product_id'];
    }

    /**
     * Sets parent_order_product_id
     *
     * @param int $parent_order_product_id ID of a parent product.
     *
     * @return $this
     */
    public function setParentOrderProductId($parent_order_product_id)
    {
        $this->container['parent_order_product_id'] = $parent_order_product_id;

        return $this;
    }

    /**
     * Gets is_bundled_product
     *
     * @return bool
     */
    public function getIsBundledProduct()
    {
        return $this->container['is_bundled_product'];
    }

    /**
     * Sets is_bundled_product
     *
     * @param bool $is_bundled_product Whether this product is bundled with other products.
     *
     * @return $this
     */
    public function setIsBundledProduct($is_bundled_product)
    {
        $this->container['is_bundled_product'] = $is_bundled_product;

        return $this;
    }

    /**
     * Gets bin_picking_number
     *
     * @return string
     */
    public function getBinPickingNumber()
    {
        return $this->container['bin_picking_number'];
    }

    /**
     * Sets bin_picking_number
     *
     * @param string $bin_picking_number Bin picking number for the physical product.
     *
     * @return $this
     */
    public function setBinPickingNumber($bin_picking_number)
    {
        $this->container['bin_picking_number'] = $bin_picking_number;

        return $this;
    }

    /**
     * Gets applied_discounts
     *
     * @return \BigCommerce\OrdersV2\Model\OrderProductAppliedDiscounts1[]
     */
    public function getAppliedDiscounts()
    {
        return $this->container['applied_discounts'];
    }

    /**
     * Sets applied_discounts
     *
     * @param \BigCommerce\OrdersV2\Model\OrderProductAppliedDiscounts1[] $applied_discounts Array of objects containing discounts applied to the product.
     *
     * @return $this
     */
    public function setAppliedDiscounts($applied_discounts)
    {
        $this->container['applied_discounts'] = $applied_discounts;

        return $this;
    }

    /**
     * Gets product_options
     *
     * @return \BigCommerce\OrdersV2\Model\OrderProductOptions1[]
     */
    public function getProductOptions()
    {
        return $this->container['product_options'];
    }

    /**
     * Sets product_options
     *
     * @param \BigCommerce\OrdersV2\Model\OrderProductOptions1[] $product_options Array of product option objects.
     *
     * @return $this
     */
    public function setProductOptions($product_options)
    {
        $this->container['product_options'] = $product_options;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return int
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param int $external_id ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc Universal Product Code. Can be written to for custom products and catalog products.
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets variant_id
     *
     * @return int
     */
    public function getVariantId()
    {
        return $this->container['variant_id'];
    }

    /**
     * Sets variant_id
     *
     * @param int $variant_id Products `variant_id`. PUT or POST. This field is not available for custom products.
     *
     * @return $this
     */
    public function setVariantId($variant_id)
    {
        $this->container['variant_id'] = $variant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
