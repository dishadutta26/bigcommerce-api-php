<?php
/**
 * OrderProducts2Test
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V2
 *
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  * `currency_code` - the display currency used to present prices to the shopper on the storefront. * `currency_exchange_rate`: the exchange rate between the store's default currency and the display currency; when the order is created by means of the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1).  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the store's default currency * `store_default_to_transactional_exchange_rate` - the exchange rate between the store's default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code: \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace BigCommerce\OrdersV2;

/**
 * OrderProducts2Test Class Doc Comment
 *
 * @category    Class
 * @description OrderProducts2
 * @package     BigCommerce\OrdersV2
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderProducts2Test extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "OrderProducts2"
     */
    public function testOrderProducts2()
    {
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
    }

    /**
     * Test attribute "order_id"
     */
    public function testPropertyOrderId()
    {
    }

    /**
     * Test attribute "product_id"
     */
    public function testPropertyProductId()
    {
    }

    /**
     * Test attribute "order_address_id"
     */
    public function testPropertyOrderAddressId()
    {
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
    }

    /**
     * Test attribute "sku"
     */
    public function testPropertySku()
    {
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
    }

    /**
     * Test attribute "base_price"
     */
    public function testPropertyBasePrice()
    {
    }

    /**
     * Test attribute "price_ex_tax"
     */
    public function testPropertyPriceExTax()
    {
    }

    /**
     * Test attribute "price_inc_tax"
     */
    public function testPropertyPriceIncTax()
    {
    }

    /**
     * Test attribute "price_tax"
     */
    public function testPropertyPriceTax()
    {
    }

    /**
     * Test attribute "base_total"
     */
    public function testPropertyBaseTotal()
    {
    }

    /**
     * Test attribute "total_ex_tax"
     */
    public function testPropertyTotalExTax()
    {
    }

    /**
     * Test attribute "total_inc_tax"
     */
    public function testPropertyTotalIncTax()
    {
    }

    /**
     * Test attribute "total_tax"
     */
    public function testPropertyTotalTax()
    {
    }

    /**
     * Test attribute "quantity"
     */
    public function testPropertyQuantity()
    {
    }

    /**
     * Test attribute "base_cost_price"
     */
    public function testPropertyBaseCostPrice()
    {
    }

    /**
     * Test attribute "cost_price_inc_tax"
     */
    public function testPropertyCostPriceIncTax()
    {
    }

    /**
     * Test attribute "cost_price_ex_tax"
     */
    public function testPropertyCostPriceExTax()
    {
    }

    /**
     * Test attribute "weight"
     */
    public function testPropertyWeight()
    {
    }

    /**
     * Test attribute "cost_price_tax"
     */
    public function testPropertyCostPriceTax()
    {
    }

    /**
     * Test attribute "is_refunded"
     */
    public function testPropertyIsRefunded()
    {
    }

    /**
     * Test attribute "refunded_amount"
     */
    public function testPropertyRefundedAmount()
    {
    }

    /**
     * Test attribute "return_id"
     */
    public function testPropertyReturnId()
    {
    }

    /**
     * Test attribute "wrapping_name"
     */
    public function testPropertyWrappingName()
    {
    }

    /**
     * Test attribute "base_wrapping_cost"
     */
    public function testPropertyBaseWrappingCost()
    {
    }

    /**
     * Test attribute "wrapping_cost_ex_tax"
     */
    public function testPropertyWrappingCostExTax()
    {
    }

    /**
     * Test attribute "wrapping_cost_inc_tax"
     */
    public function testPropertyWrappingCostIncTax()
    {
    }

    /**
     * Test attribute "wrapping_cost_tax"
     */
    public function testPropertyWrappingCostTax()
    {
    }

    /**
     * Test attribute "wrapping_message"
     */
    public function testPropertyWrappingMessage()
    {
    }

    /**
     * Test attribute "quantity_shipped"
     */
    public function testPropertyQuantityShipped()
    {
    }

    /**
     * Test attribute "event_name"
     */
    public function testPropertyEventName()
    {
    }

    /**
     * Test attribute "event_date"
     */
    public function testPropertyEventDate()
    {
    }

    /**
     * Test attribute "fixed_shipping_cost"
     */
    public function testPropertyFixedShippingCost()
    {
    }

    /**
     * Test attribute "ebay_item_id"
     */
    public function testPropertyEbayItemId()
    {
    }

    /**
     * Test attribute "ebay_transaction_id"
     */
    public function testPropertyEbayTransactionId()
    {
    }

    /**
     * Test attribute "option_set_id"
     */
    public function testPropertyOptionSetId()
    {
    }

    /**
     * Test attribute "parent_order_product_id"
     */
    public function testPropertyParentOrderProductId()
    {
    }

    /**
     * Test attribute "is_bundled_product"
     */
    public function testPropertyIsBundledProduct()
    {
    }

    /**
     * Test attribute "bin_picking_number"
     */
    public function testPropertyBinPickingNumber()
    {
    }

    /**
     * Test attribute "applied_discounts"
     */
    public function testPropertyAppliedDiscounts()
    {
    }

    /**
     * Test attribute "product_options"
     */
    public function testPropertyProductOptions()
    {
    }

    /**
     * Test attribute "external_id"
     */
    public function testPropertyExternalId()
    {
    }

    /**
     * Test attribute "upc"
     */
    public function testPropertyUpc()
    {
    }

    /**
     * Test attribute "variant_id"
     */
    public function testPropertyVariantId()
    {
    }
}
