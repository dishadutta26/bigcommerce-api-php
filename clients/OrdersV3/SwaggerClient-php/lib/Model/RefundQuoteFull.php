<?php
/**
 * RefundQuoteFull
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\OrdersV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders V3
 *
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Order Transactions](#order-transactions) - [Order refunds](#order-refunds) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` and `client_id` in the request headers.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Client: {{CLIENT_ID}} X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter|                                      |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.   **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\OrdersV3\Model;

use \ArrayAccess;
use \BigCommerce\OrdersV3\ObjectSerializer;

/**
 * RefundQuoteFull Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\OrdersV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RefundQuoteFull implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RefundQuote_Full';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
'total_refund_amount' => 'float',
'total_refund_tax_amount' => 'float',
'rounding' => 'float',
'adjustment' => 'float',
'tax_inclusive' => 'bool',
'refund_methods' => 'object[][]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'total_refund_amount' => 'float',
'total_refund_tax_amount' => null,
'rounding' => null,
'adjustment' => 'float',
'tax_inclusive' => null,
'refund_methods' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
'total_refund_amount' => 'total_refund_amount',
'total_refund_tax_amount' => 'total_refund_tax_amount',
'rounding' => 'rounding',
'adjustment' => 'adjustment',
'tax_inclusive' => 'tax_inclusive',
'refund_methods' => 'refund_methods'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'total_refund_amount' => 'setTotalRefundAmount',
'total_refund_tax_amount' => 'setTotalRefundTaxAmount',
'rounding' => 'setRounding',
'adjustment' => 'setAdjustment',
'tax_inclusive' => 'setTaxInclusive',
'refund_methods' => 'setRefundMethods'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'total_refund_amount' => 'getTotalRefundAmount',
'total_refund_tax_amount' => 'getTotalRefundTaxAmount',
'rounding' => 'getRounding',
'adjustment' => 'getAdjustment',
'tax_inclusive' => 'getTaxInclusive',
'refund_methods' => 'getRefundMethods'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['total_refund_amount'] = isset($data['total_refund_amount']) ? $data['total_refund_amount'] : null;
        $this->container['total_refund_tax_amount'] = isset($data['total_refund_tax_amount']) ? $data['total_refund_tax_amount'] : null;
        $this->container['rounding'] = isset($data['rounding']) ? $data['rounding'] : null;
        $this->container['adjustment'] = isset($data['adjustment']) ? $data['adjustment'] : null;
        $this->container['tax_inclusive'] = isset($data['tax_inclusive']) ? $data['tax_inclusive'] : null;
        $this->container['refund_methods'] = isset($data['refund_methods']) ? $data['refund_methods'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id ID of the order to be refunded
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets total_refund_amount
     *
     * @return float
     */
    public function getTotalRefundAmount()
    {
        return $this->container['total_refund_amount'];
    }

    /**
     * Sets total_refund_amount
     *
     * @param float $total_refund_amount A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers
     *
     * @return $this
     */
    public function setTotalRefundAmount($total_refund_amount)
    {
        $this->container['total_refund_amount'] = $total_refund_amount;

        return $this;
    }

    /**
     * Gets total_refund_tax_amount
     *
     * @return float
     */
    public function getTotalRefundTaxAmount()
    {
        return $this->container['total_refund_tax_amount'];
    }

    /**
     * Sets total_refund_tax_amount
     *
     * @param float $total_refund_tax_amount total_refund_tax_amount
     *
     * @return $this
     */
    public function setTotalRefundTaxAmount($total_refund_tax_amount)
    {
        $this->container['total_refund_tax_amount'] = $total_refund_tax_amount;

        return $this;
    }

    /**
     * Gets rounding
     *
     * @return float
     */
    public function getRounding()
    {
        return $this->container['rounding'];
    }

    /**
     * Sets rounding
     *
     * @param float $rounding Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)
     *
     * @return $this
     */
    public function setRounding($rounding)
    {
        $this->container['rounding'] = $rounding;

        return $this;
    }

    /**
     * Gets adjustment
     *
     * @return float
     */
    public function getAdjustment()
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param float $adjustment A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers
     *
     * @return $this
     */
    public function setAdjustment($adjustment)
    {
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets tax_inclusive
     *
     * @return bool
     */
    public function getTaxInclusive()
    {
        return $this->container['tax_inclusive'];
    }

    /**
     * Sets tax_inclusive
     *
     * @param bool $tax_inclusive Indicate if total_refund_amount includes tax amount
     *
     * @return $this
     */
    public function setTaxInclusive($tax_inclusive)
    {
        $this->container['tax_inclusive'] = $tax_inclusive;

        return $this;
    }

    /**
     * Gets refund_methods
     *
     * @return object[][]
     */
    public function getRefundMethods()
    {
        return $this->container['refund_methods'];
    }

    /**
     * Sets refund_methods
     *
     * @param object[][] $refund_methods An array of available refund methods.  Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.   For example, if the order was placed by a combination of store credit and bank deposit the  refund methods would be: ```json {   \"refund_methods\": [     [       {         \"provider_id\": \"storecredit\",         \"provider_description\": \"Store Credit\",         \"amount\": 119.35,         \"offline\": false,         \"offline_provider\": false,         \"offline_reason\": \"\"       }     ],     [       {         \"provider_id\": \"custom\",         \"provider_description\": \"Custom\",         \"amount\": 119.35,         \"offline\": true,         \"offline_provider\": true,         \"offline_reason\": \"This is an offline payment provider.\"       }     ],     [       {         \"provider_id\": \"bankdeposit\",         \"provider_description\": \"Bank Deposit\",         \"amount\": 80.35,         \"offline\": true,         \"offline_provider\": true,         \"offline_reason\": \"This is an offline payment provider.\"       },        {         \"provider_id\": \"storecredit\",         \"provider_description\": \"Store Credit\",         \"amount\": 39,         \"offline\": false,         \"offline_provider\": false,         \"offline_reason\": \"\"       }     ]   ] } ```  In this case there are three refund methods available to the merchant: 1. Refund up to the entire order amount to store credit. 2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\"). 3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.    >
     *
     * @return $this
     */
    public function setRefundMethods($refund_methods)
    {
        $this->container['refund_methods'] = $refund_methods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
