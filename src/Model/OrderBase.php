<?php
/**
 * OrderBase
 *
 * @package  BigCommerce\Api
 */

/**
 * Orders APIs
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Model;

use \ArrayAccess;

class OrderBase implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_address' => '\BigCommerce\Api\Model\OrderBillingAddress',
        'customer_id' => 'int',
        'status_id' => 'int',
        'subtotal_ex_tax' => 'string',
        'subtotal_inc_tax' => 'string',
        'base_shipping_cost' => 'string',
        'shipping_cost_ex_tax' => 'string',
        'shipping_cost_inc_tax' => 'string',
        'base_handling_cost' => 'string',
        'handling_cost_ex_tax' => 'string',
        'handling_cost_inc_tax' => 'string',
        'base_wrapping_cost' => 'string',
        'wrapping_cost_ex_tax' => 'string',
        'wrapping_cost_inc_tax' => 'string',
        'items_total' => 'float',
        'items_shipped' => 'float',
        'payment_method' => 'string',
        'payment_provider_id' => 'int',
        'refunded_amount' => 'string',
        'order_is_digital' => 'bool',
        'ip_address' => 'string',
        'geoip_country' => 'string',
        'geoip_country_iso2' => 'string',
        'staff_notes' => 'string',
        'customer_message' => 'string',
        'discount_amount' => 'string',
        'is_deleted' => 'bool',
        'credit_card_type' => 'int',
        'ebay_order_id' => 'string',
        'external_source' => 'string',
        'external_id' => 'int',
        'external_merchant_id' => 'string',
        'channel_id' => 'int',
        'tax_provider_id' => 'string',
        'date_created' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address' => 'billing_address',
        'customer_id' => 'customer_id',
        'status_id' => 'status_id',
        'subtotal_ex_tax' => 'subtotal_ex_tax',
        'subtotal_inc_tax' => 'subtotal_inc_tax',
        'base_shipping_cost' => 'base_shipping_cost',
        'shipping_cost_ex_tax' => 'shipping_cost_ex_tax',
        'shipping_cost_inc_tax' => 'shipping_cost_inc_tax',
        'base_handling_cost' => 'base_handling_cost',
        'handling_cost_ex_tax' => 'handling_cost_ex_tax',
        'handling_cost_inc_tax' => 'handling_cost_inc_tax',
        'base_wrapping_cost' => 'base_wrapping_cost',
        'wrapping_cost_ex_tax' => 'wrapping_cost_ex_tax',
        'wrapping_cost_inc_tax' => 'wrapping_cost_inc_tax',
        'items_total' => 'items_total',
        'items_shipped' => 'items_shipped',
        'payment_method' => 'payment_method',
        'payment_provider_id' => 'payment_provider_id',
        'refunded_amount' => 'refunded_amount',
        'order_is_digital' => 'order_is_digital',
        'ip_address' => 'ip_address',
        'geoip_country' => 'geoip_country',
        'geoip_country_iso2' => 'geoip_country_iso2',
        'staff_notes' => 'staff_notes',
        'customer_message' => 'customer_message',
        'discount_amount' => 'discount_amount',
        'is_deleted' => 'is_deleted',
        'credit_card_type' => 'credit_card_type',
        'ebay_order_id' => 'ebay_order_id',
        'external_source' => 'external_source',
        'external_id' => 'external_id',
        'external_merchant_id' => 'external_merchant_id',
        'channel_id' => 'channel_id',
        'tax_provider_id' => 'tax_provider_id',
        'date_created' => 'date_created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'billing_address' => 'setBillingAddress',
        'customer_id' => 'setCustomerId',
        'status_id' => 'setStatusId',
        'subtotal_ex_tax' => 'setSubtotalExTax',
        'subtotal_inc_tax' => 'setSubtotalIncTax',
        'base_shipping_cost' => 'setBaseShippingCost',
        'shipping_cost_ex_tax' => 'setShippingCostExTax',
        'shipping_cost_inc_tax' => 'setShippingCostIncTax',
        'base_handling_cost' => 'setBaseHandlingCost',
        'handling_cost_ex_tax' => 'setHandlingCostExTax',
        'handling_cost_inc_tax' => 'setHandlingCostIncTax',
        'base_wrapping_cost' => 'setBaseWrappingCost',
        'wrapping_cost_ex_tax' => 'setWrappingCostExTax',
        'wrapping_cost_inc_tax' => 'setWrappingCostIncTax',
        'items_total' => 'setItemsTotal',
        'items_shipped' => 'setItemsShipped',
        'payment_method' => 'setPaymentMethod',
        'payment_provider_id' => 'setPaymentProviderId',
        'refunded_amount' => 'setRefundedAmount',
        'order_is_digital' => 'setOrderIsDigital',
        'ip_address' => 'setIpAddress',
        'geoip_country' => 'setGeoipCountry',
        'geoip_country_iso2' => 'setGeoipCountryIso2',
        'staff_notes' => 'setStaffNotes',
        'customer_message' => 'setCustomerMessage',
        'discount_amount' => 'setDiscountAmount',
        'is_deleted' => 'setIsDeleted',
        'credit_card_type' => 'setCreditCardType',
        'ebay_order_id' => 'setEbayOrderId',
        'external_source' => 'setExternalSource',
        'external_id' => 'setExternalId',
        'external_merchant_id' => 'setExternalMerchantId',
        'channel_id' => 'setChannelId',
        'tax_provider_id' => 'setTaxProviderId',
        'date_created' => 'setDateCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'billing_address' => 'getBillingAddress',
        'customer_id' => 'getCustomerId',
        'status_id' => 'getStatusId',
        'subtotal_ex_tax' => 'getSubtotalExTax',
        'subtotal_inc_tax' => 'getSubtotalIncTax',
        'base_shipping_cost' => 'getBaseShippingCost',
        'shipping_cost_ex_tax' => 'getShippingCostExTax',
        'shipping_cost_inc_tax' => 'getShippingCostIncTax',
        'base_handling_cost' => 'getBaseHandlingCost',
        'handling_cost_ex_tax' => 'getHandlingCostExTax',
        'handling_cost_inc_tax' => 'getHandlingCostIncTax',
        'base_wrapping_cost' => 'getBaseWrappingCost',
        'wrapping_cost_ex_tax' => 'getWrappingCostExTax',
        'wrapping_cost_inc_tax' => 'getWrappingCostIncTax',
        'items_total' => 'getItemsTotal',
        'items_shipped' => 'getItemsShipped',
        'payment_method' => 'getPaymentMethod',
        'payment_provider_id' => 'getPaymentProviderId',
        'refunded_amount' => 'getRefundedAmount',
        'order_is_digital' => 'getOrderIsDigital',
        'ip_address' => 'getIpAddress',
        'geoip_country' => 'getGeoipCountry',
        'geoip_country_iso2' => 'getGeoipCountryIso2',
        'staff_notes' => 'getStaffNotes',
        'customer_message' => 'getCustomerMessage',
        'discount_amount' => 'getDiscountAmount',
        'is_deleted' => 'getIsDeleted',
        'credit_card_type' => 'getCreditCardType',
        'ebay_order_id' => 'getEbayOrderId',
        'external_source' => 'getExternalSource',
        'external_id' => 'getExternalId',
        'external_merchant_id' => 'getExternalMerchantId',
        'channel_id' => 'getChannelId',
        'tax_provider_id' => 'getTaxProviderId',
        'date_created' => 'getDateCreated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['billing_address'] = array_key_exists('billing_address', $data) ? $data['billing_address'] : null;
        $this->container['customer_id'] = array_key_exists('customer_id', $data) ? $data['customer_id'] : null;
        $this->container['status_id'] = array_key_exists('status_id', $data) ? $data['status_id'] : null;
        $this->container['subtotal_ex_tax'] = array_key_exists('subtotal_ex_tax', $data) ? $data['subtotal_ex_tax'] : null;
        $this->container['subtotal_inc_tax'] = array_key_exists('subtotal_inc_tax', $data) ? $data['subtotal_inc_tax'] : null;
        $this->container['base_shipping_cost'] = array_key_exists('base_shipping_cost', $data) ? $data['base_shipping_cost'] : null;
        $this->container['shipping_cost_ex_tax'] = array_key_exists('shipping_cost_ex_tax', $data) ? $data['shipping_cost_ex_tax'] : null;
        $this->container['shipping_cost_inc_tax'] = array_key_exists('shipping_cost_inc_tax', $data) ? $data['shipping_cost_inc_tax'] : null;
        $this->container['base_handling_cost'] = array_key_exists('base_handling_cost', $data) ? $data['base_handling_cost'] : null;
        $this->container['handling_cost_ex_tax'] = array_key_exists('handling_cost_ex_tax', $data) ? $data['handling_cost_ex_tax'] : null;
        $this->container['handling_cost_inc_tax'] = array_key_exists('handling_cost_inc_tax', $data) ? $data['handling_cost_inc_tax'] : null;
        $this->container['base_wrapping_cost'] = array_key_exists('base_wrapping_cost', $data) ? $data['base_wrapping_cost'] : null;
        $this->container['wrapping_cost_ex_tax'] = array_key_exists('wrapping_cost_ex_tax', $data) ? $data['wrapping_cost_ex_tax'] : null;
        $this->container['wrapping_cost_inc_tax'] = array_key_exists('wrapping_cost_inc_tax', $data) ? $data['wrapping_cost_inc_tax'] : null;
        $this->container['items_total'] = array_key_exists('items_total', $data) ? $data['items_total'] : null;
        $this->container['items_shipped'] = array_key_exists('items_shipped', $data) ? $data['items_shipped'] : null;
        $this->container['payment_method'] = array_key_exists('payment_method', $data) ? $data['payment_method'] : null;
        $this->container['payment_provider_id'] = array_key_exists('payment_provider_id', $data) ? $data['payment_provider_id'] : null;
        $this->container['refunded_amount'] = array_key_exists('refunded_amount', $data) ? $data['refunded_amount'] : null;
        $this->container['order_is_digital'] = array_key_exists('order_is_digital', $data) ? $data['order_is_digital'] : null;
        $this->container['ip_address'] = array_key_exists('ip_address', $data) ? $data['ip_address'] : null;
        $this->container['geoip_country'] = array_key_exists('geoip_country', $data) ? $data['geoip_country'] : null;
        $this->container['geoip_country_iso2'] = array_key_exists('geoip_country_iso2', $data) ? $data['geoip_country_iso2'] : null;
        $this->container['staff_notes'] = array_key_exists('staff_notes', $data) ? $data['staff_notes'] : null;
        $this->container['customer_message'] = array_key_exists('customer_message', $data) ? $data['customer_message'] : null;
        $this->container['discount_amount'] = array_key_exists('discount_amount', $data) ? $data['discount_amount'] : null;
        $this->container['is_deleted'] = array_key_exists('is_deleted', $data) ? $data['is_deleted'] : null;
        $this->container['credit_card_type'] = array_key_exists('credit_card_type', $data) ? $data['credit_card_type'] : null;
        $this->container['ebay_order_id'] = array_key_exists('ebay_order_id', $data) ? $data['ebay_order_id'] : null;
        $this->container['external_source'] = array_key_exists('external_source', $data) ? $data['external_source'] : null;
        $this->container['external_id'] = array_key_exists('external_id', $data) ? $data['external_id'] : null;
        $this->container['external_merchant_id'] = array_key_exists('external_merchant_id', $data) ? $data['external_merchant_id'] : null;
        $this->container['channel_id'] = array_key_exists('channel_id', $data) ? $data['channel_id'] : null;
        $this->container['tax_provider_id'] = array_key_exists('tax_provider_id', $data) ? $data['tax_provider_id'] : null;
        $this->container['date_created'] = array_key_exists('date_created', $data) ? $data['date_created'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets billing_address
     * @return \BigCommerce\Api\Model\OrderBillingAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param \BigCommerce\Api\Model\OrderBillingAddress $billing_address
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets customer_id
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param int $customer_id The ID of the customer placing the order; or 0 if it was a guest order.
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets status_id
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     * @param int $status_id The status ID of the order.
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets subtotal_ex_tax
     * @return string
     */
    public function getSubtotalExTax()
    {
        return $this->container['subtotal_ex_tax'];
    }

    /**
     * Sets subtotal_ex_tax
     * @param string $subtotal_ex_tax Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setSubtotalExTax($subtotal_ex_tax)
    {
        $this->container['subtotal_ex_tax'] = $subtotal_ex_tax;

        return $this;
    }

    /**
     * Gets subtotal_inc_tax
     * @return string
     */
    public function getSubtotalIncTax()
    {
        return $this->container['subtotal_inc_tax'];
    }

    /**
     * Sets subtotal_inc_tax
     * @param string $subtotal_inc_tax Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setSubtotalIncTax($subtotal_inc_tax)
    {
        $this->container['subtotal_inc_tax'] = $subtotal_inc_tax;

        return $this;
    }

    /**
     * Gets base_shipping_cost
     * @return string
     */
    public function getBaseShippingCost()
    {
        return $this->container['base_shipping_cost'];
    }

    /**
     * Sets base_shipping_cost
     * @param string $base_shipping_cost The value of the base shipping cost. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setBaseShippingCost($base_shipping_cost)
    {
        $this->container['base_shipping_cost'] = $base_shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_cost_ex_tax
     * @return string
     */
    public function getShippingCostExTax()
    {
        return $this->container['shipping_cost_ex_tax'];
    }

    /**
     * Sets shipping_cost_ex_tax
     * @param string $shipping_cost_ex_tax The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setShippingCostExTax($shipping_cost_ex_tax)
    {
        $this->container['shipping_cost_ex_tax'] = $shipping_cost_ex_tax;

        return $this;
    }

    /**
     * Gets shipping_cost_inc_tax
     * @return string
     */
    public function getShippingCostIncTax()
    {
        return $this->container['shipping_cost_inc_tax'];
    }

    /**
     * Sets shipping_cost_inc_tax
     * @param string $shipping_cost_inc_tax The value of shipping cost, including tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setShippingCostIncTax($shipping_cost_inc_tax)
    {
        $this->container['shipping_cost_inc_tax'] = $shipping_cost_inc_tax;

        return $this;
    }

    /**
     * Gets base_handling_cost
     * @return string
     */
    public function getBaseHandlingCost()
    {
        return $this->container['base_handling_cost'];
    }

    /**
     * Sets base_handling_cost
     * @param string $base_handling_cost The value of the base handling cost. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setBaseHandlingCost($base_handling_cost)
    {
        $this->container['base_handling_cost'] = $base_handling_cost;

        return $this;
    }

    /**
     * Gets handling_cost_ex_tax
     * @return string
     */
    public function getHandlingCostExTax()
    {
        return $this->container['handling_cost_ex_tax'];
    }

    /**
     * Sets handling_cost_ex_tax
     * @param string $handling_cost_ex_tax The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setHandlingCostExTax($handling_cost_ex_tax)
    {
        $this->container['handling_cost_ex_tax'] = $handling_cost_ex_tax;

        return $this;
    }

    /**
     * Gets handling_cost_inc_tax
     * @return string
     */
    public function getHandlingCostIncTax()
    {
        return $this->container['handling_cost_inc_tax'];
    }

    /**
     * Sets handling_cost_inc_tax
     * @param string $handling_cost_inc_tax The value of the handling cost, including tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setHandlingCostIncTax($handling_cost_inc_tax)
    {
        $this->container['handling_cost_inc_tax'] = $handling_cost_inc_tax;

        return $this;
    }

    /**
     * Gets base_wrapping_cost
     * @return string
     */
    public function getBaseWrappingCost()
    {
        return $this->container['base_wrapping_cost'];
    }

    /**
     * Sets base_wrapping_cost
     * @param string $base_wrapping_cost The value of the base wrapping cost. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setBaseWrappingCost($base_wrapping_cost)
    {
        $this->container['base_wrapping_cost'] = $base_wrapping_cost;

        return $this;
    }

    /**
     * Gets wrapping_cost_ex_tax
     * @return string
     */
    public function getWrappingCostExTax()
    {
        return $this->container['wrapping_cost_ex_tax'];
    }

    /**
     * Sets wrapping_cost_ex_tax
     * @param string $wrapping_cost_ex_tax The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setWrappingCostExTax($wrapping_cost_ex_tax)
    {
        $this->container['wrapping_cost_ex_tax'] = $wrapping_cost_ex_tax;

        return $this;
    }

    /**
     * Gets wrapping_cost_inc_tax
     * @return string
     */
    public function getWrappingCostIncTax()
    {
        return $this->container['wrapping_cost_inc_tax'];
    }

    /**
     * Sets wrapping_cost_inc_tax
     * @param string $wrapping_cost_inc_tax The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setWrappingCostIncTax($wrapping_cost_inc_tax)
    {
        $this->container['wrapping_cost_inc_tax'] = $wrapping_cost_inc_tax;

        return $this;
    }

    /**
     * Gets items_total
     * @return float
     */
    public function getItemsTotal()
    {
        return $this->container['items_total'];
    }

    /**
     * Sets items_total
     * @param float $items_total The total number of items in the order.
     * @return $this
     */
    public function setItemsTotal($items_total)
    {
        $this->container['items_total'] = $items_total;

        return $this;
    }

    /**
     * Gets items_shipped
     * @return float
     */
    public function getItemsShipped()
    {
        return $this->container['items_shipped'];
    }

    /**
     * Sets items_shipped
     * @param float $items_shipped The number of items that have been shipped.
     * @return $this
     */
    public function setItemsShipped($items_shipped)
    {
        $this->container['items_shipped'] = $items_shipped;

        return $this;
    }

    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param string $payment_method The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_provider_id
     * @return int
     */
    public function getPaymentProviderId()
    {
        return $this->container['payment_provider_id'];
    }

    /**
     * Sets payment_provider_id
     * @param int $payment_provider_id The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used).
     * @return $this
     */
    public function setPaymentProviderId($payment_provider_id)
    {
        $this->container['payment_provider_id'] = $payment_provider_id;

        return $this;
    }

    /**
     * Gets refunded_amount
     * @return string
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     * @param string $refunded_amount The amount refunded from this transaction. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets order_is_digital
     * @return bool
     */
    public function getOrderIsDigital()
    {
        return $this->container['order_is_digital'];
    }

    /**
     * Sets order_is_digital
     * @param bool $order_is_digital Whether this is an order for digital products.
     * @return $this
     */
    public function setOrderIsDigital($order_is_digital)
    {
        $this->container['order_is_digital'] = $order_is_digital;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address IP Address of the customer, if known.
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets geoip_country
     * @return string
     */
    public function getGeoipCountry()
    {
        return $this->container['geoip_country'];
    }

    /**
     * Sets geoip_country
     * @param string $geoip_country The full name of the country where the customer made the purchase, based on the IP.
     * @return $this
     */
    public function setGeoipCountry($geoip_country)
    {
        $this->container['geoip_country'] = $geoip_country;

        return $this;
    }

    /**
     * Gets geoip_country_iso2
     * @return string
     */
    public function getGeoipCountryIso2()
    {
        return $this->container['geoip_country_iso2'];
    }

    /**
     * Sets geoip_country_iso2
     * @param string $geoip_country_iso2 The country where the customer made the purchase, in ISO2 format, based on the IP.
     * @return $this
     */
    public function setGeoipCountryIso2($geoip_country_iso2)
    {
        $this->container['geoip_country_iso2'] = $geoip_country_iso2;

        return $this;
    }

    /**
     * Gets staff_notes
     * @return string
     */
    public function getStaffNotes()
    {
        return $this->container['staff_notes'];
    }

    /**
     * Sets staff_notes
     * @param string $staff_notes Any additional notes for staff.
     * @return $this
     */
    public function setStaffNotes($staff_notes)
    {
        $this->container['staff_notes'] = $staff_notes;

        return $this;
    }

    /**
     * Gets customer_message
     * @return string
     */
    public function getCustomerMessage()
    {
        return $this->container['customer_message'];
    }

    /**
     * Sets customer_message
     * @param string $customer_message Message that the customer entered (number, optiona) -o the `Order Comments` box during checkout.
     * @return $this
     */
    public function setCustomerMessage($customer_message)
    {
        $this->container['customer_message'] = $customer_message;

        return $this;
    }

    /**
     * Gets discount_amount
     * @return string
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     * @param string $discount_amount Amount of discount for this transaction. (Float, Float-As-String, Integer)
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets is_deleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     * @param bool $is_deleted Indicates whether the order was deleted (archived). Set to to true, to archive an order.
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets credit_card_type
     * @return int
     */
    public function getCreditCardType()
    {
        return $this->container['credit_card_type'];
    }

    /**
     * Sets credit_card_type
     * @param int $credit_card_type
     * @return $this
     */
    public function setCreditCardType($credit_card_type)
    {
        $this->container['credit_card_type'] = $credit_card_type;

        return $this;
    }

    /**
     * Gets ebay_order_id
     * @return string
     */
    public function getEbayOrderId()
    {
        return $this->container['ebay_order_id'];
    }

    /**
     * Sets ebay_order_id
     * @param string $ebay_order_id If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
     * @return $this
     */
    public function setEbayOrderId($ebay_order_id)
    {
        $this->container['ebay_order_id'] = $ebay_order_id;

        return $this;
    }

    /**
     * Gets external_source
     * @return string
     */
    public function getExternalSource()
    {
        return $this->container['external_source'];
    }

    /**
     * Sets external_source
     * @param string $external_source For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example: `POS`. Otherwise, the value will be null.
     * @return $this
     */
    public function setExternalSource($external_source)
    {
        $this->container['external_source'] = $external_source;

        return $this;
    }

    /**
     * Gets external_id
     * @return int
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     * @param int $external_id ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_merchant_id
     * @return string
     */
    public function getExternalMerchantId()
    {
        return $this->container['external_merchant_id'];
    }

    /**
     * Sets external_merchant_id
     * @param string $external_merchant_id Id of the external merchant.
     * @return $this
     */
    public function setExternalMerchantId($external_merchant_id)
    {
        $this->container['external_merchant_id'] = $external_merchant_id;

        return $this;
    }

    /**
     * Gets channel_id
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     * @param int $channel_id Shows where the order originated. The channel_id will default to 1. Read-Only.
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets tax_provider_id
     * @return string
     */
    public function getTaxProviderId()
    {
        return $this->container['tax_provider_id'];
    }

    /**
     * Sets tax_provider_id
     * @param string $tax_provider_id BasicTaxProvider - Tax is set to manual.   AvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.   \"\" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API. This can be set when creating an order using a POST.
     * @return $this
     */
    public function setTaxProviderId($tax_provider_id)
    {
        $this->container['tax_provider_id'] = $tax_provider_id;

        return $this;
    }

    /**
     * Gets date_created
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param string $date_created The date this order was created. If not specified, will default to the current time. The date should be in RFC 2822 format.
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


