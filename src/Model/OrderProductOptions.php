<?php
/**
 * OrderProductOptions
 *
 * @package  BigCommerce\Api
 */

/**
 * Orders APIs
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Model;

use \ArrayAccess;

class OrderProductOptions implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderProductOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'option_id' => 'int',
        'order_product_id' => 'int',
        'product_option_id' => 'int',
        'display_name' => 'string',
        'display_value' => 'string',
        'value' => 'string',
        'type' => 'string',
        'name' => 'string',
        'display_style' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'option_id' => 'option_id',
        'order_product_id' => 'order_product_id',
        'product_option_id' => 'product_option_id',
        'display_name' => 'display_name',
        'display_value' => 'display_value',
        'value' => 'value',
        'type' => 'type',
        'name' => 'name',
        'display_style' => 'display_style'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'option_id' => 'setOptionId',
        'order_product_id' => 'setOrderProductId',
        'product_option_id' => 'setProductOptionId',
        'display_name' => 'setDisplayName',
        'display_value' => 'setDisplayValue',
        'value' => 'setValue',
        'type' => 'setType',
        'name' => 'setName',
        'display_style' => 'setDisplayStyle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'option_id' => 'getOptionId',
        'order_product_id' => 'getOrderProductId',
        'product_option_id' => 'getProductOptionId',
        'display_name' => 'getDisplayName',
        'display_value' => 'getDisplayValue',
        'value' => 'getValue',
        'type' => 'getType',
        'name' => 'getName',
        'display_style' => 'getDisplayStyle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['id'] = array_key_exists('id', $data) ? $data['id'] : null;
        $this->container['option_id'] = array_key_exists('option_id', $data) ? $data['option_id'] : null;
        $this->container['order_product_id'] = array_key_exists('order_product_id', $data) ? $data['order_product_id'] : null;
        $this->container['product_option_id'] = array_key_exists('product_option_id', $data) ? $data['product_option_id'] : null;
        $this->container['display_name'] = array_key_exists('display_name', $data) ? $data['display_name'] : null;
        $this->container['display_value'] = array_key_exists('display_value', $data) ? $data['display_value'] : null;
        $this->container['value'] = array_key_exists('value', $data) ? $data['value'] : null;
        $this->container['type'] = array_key_exists('type', $data) ? $data['type'] : null;
        $this->container['name'] = array_key_exists('name', $data) ? $data['name'] : null;
        $this->container['display_style'] = array_key_exists('display_style', $data) ? $data['display_style'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique numerical ID of the option; increments sequentially.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets option_id
     * @return int
     */
    public function getOptionId()
    {
        return $this->container['option_id'];
    }

    /**
     * Sets option_id
     * @param int $option_id Numeric ID of the associated option.
     * @return $this
     */
    public function setOptionId($option_id)
    {
        $this->container['option_id'] = $option_id;

        return $this;
    }

    /**
     * Gets order_product_id
     * @return int
     */
    public function getOrderProductId()
    {
        return $this->container['order_product_id'];
    }

    /**
     * Sets order_product_id
     * @param int $order_product_id 
     * @return $this
     */
    public function setOrderProductId($order_product_id)
    {
        $this->container['order_product_id'] = $order_product_id;

        return $this;
    }

    /**
     * Gets product_option_id
     * @return int
     */
    public function getProductOptionId()
    {
        return $this->container['product_option_id'];
    }

    /**
     * Sets product_option_id
     * @param int $product_option_id 
     * @return $this
     */
    public function setProductOptionId($product_option_id)
    {
        $this->container['product_option_id'] = $product_option_id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The name of the option, as shown on the storefront.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_value
     * @return string
     */
    public function getDisplayValue()
    {
        return $this->container['display_value'];
    }

    /**
     * Sets display_value
     * @param string $display_value The name of the value, as shown on the storefront.
     * @return $this
     */
    public function setDisplayValue($display_value)
    {
        $this->container['display_value'] = $display_value;

        return $this;
    }

    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param string $value 
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Option Type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The optionâ€™s name, as used internally. Must be unique
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_style
     * @return string
     */
    public function getDisplayStyle()
    {
        return $this->container['display_style'];
    }

    /**
     * Sets display_style
     * @param string $display_style How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
     * @return $this
     */
    public function setDisplayStyle($display_style)
    {
        $this->container['display_style'] = $display_style;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


