<?php
/**
 * ShippingQuote
 *
 * @package  BigCommerce\Api
 */

/**
 * Orders APIs
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Model;

use \ArrayAccess;

class ShippingQuote implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShippingQuote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'uuid' => 'string',
        'timestamp' => '\DateTime',
        'shipping_provider_id' => 'string',
        'shipping_provider_quote' => 'object[]',
        'provider_code' => 'string',
        'carrier_code' => 'string',
        'rate_code' => 'string',
        'rate_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'timestamp' => 'timestamp',
        'shipping_provider_id' => 'shipping_provider_id',
        'shipping_provider_quote' => 'shipping_provider_quote',
        'provider_code' => 'provider_code',
        'carrier_code' => 'carrier_code',
        'rate_code' => 'rate_code',
        'rate_id' => 'rate_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'timestamp' => 'setTimestamp',
        'shipping_provider_id' => 'setShippingProviderId',
        'shipping_provider_quote' => 'setShippingProviderQuote',
        'provider_code' => 'setProviderCode',
        'carrier_code' => 'setCarrierCode',
        'rate_code' => 'setRateCode',
        'rate_id' => 'setRateId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'timestamp' => 'getTimestamp',
        'shipping_provider_id' => 'getShippingProviderId',
        'shipping_provider_quote' => 'getShippingProviderQuote',
        'provider_code' => 'getProviderCode',
        'carrier_code' => 'getCarrierCode',
        'rate_code' => 'getRateCode',
        'rate_id' => 'getRateId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['id'] = array_key_exists('id', $data) ? $data['id'] : null;
        $this->container['uuid'] = array_key_exists('uuid', $data) ? $data['uuid'] : null;
        $this->container['timestamp'] = array_key_exists('timestamp', $data) ? $data['timestamp'] : null;
        $this->container['shipping_provider_id'] = array_key_exists('shipping_provider_id', $data) ? $data['shipping_provider_id'] : null;
        $this->container['shipping_provider_quote'] = array_key_exists('shipping_provider_quote', $data) ? $data['shipping_provider_quote'] : null;
        $this->container['provider_code'] = array_key_exists('provider_code', $data) ? $data['provider_code'] : null;
        $this->container['carrier_code'] = array_key_exists('carrier_code', $data) ? $data['carrier_code'] : null;
        $this->container['rate_code'] = array_key_exists('rate_code', $data) ? $data['rate_code'] : null;
        $this->container['rate_id'] = array_key_exists('rate_id', $data) ? $data['rate_id'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Id of the shipping quote
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid uuid of the shipping quote
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param \DateTime $timestamp Time the order was created in RFC 2822 format.
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets shipping_provider_id
     * @return string
     */
    public function getShippingProviderId()
    {
        return $this->container['shipping_provider_id'];
    }

    /**
     * Sets shipping_provider_id
     * @param string $shipping_provider_id Id of the shipping provider
     * @return $this
     */
    public function setShippingProviderId($shipping_provider_id)
    {
        $this->container['shipping_provider_id'] = $shipping_provider_id;

        return $this;
    }

    /**
     * Gets shipping_provider_quote
     * @return object[]
     */
    public function getShippingProviderQuote()
    {
        return $this->container['shipping_provider_quote'];
    }

    /**
     * Sets shipping_provider_quote
     * @param object[] $shipping_provider_quote This can vary based on the shipping provider. Manual shipping methods such as fixed will return an empty array. Shipping providers such as UPS will return an object with the shipping information. Since the shipping quote is tied to a shipping address only one quote will return in the response.
     * @return $this
     */
    public function setShippingProviderQuote($shipping_provider_quote)
    {
        $this->container['shipping_provider_quote'] = $shipping_provider_quote;

        return $this;
    }

    /**
     * Gets provider_code
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     * @param string $provider_code Code of the shipping provider
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets carrier_code
     * @return string
     */
    public function getCarrierCode()
    {
        return $this->container['carrier_code'];
    }

    /**
     * Sets carrier_code
     * @param string $carrier_code Code of the shipping carrier
     * @return $this
     */
    public function setCarrierCode($carrier_code)
    {
        $this->container['carrier_code'] = $carrier_code;

        return $this;
    }

    /**
     * Gets rate_code
     * @return string
     */
    public function getRateCode()
    {
        return $this->container['rate_code'];
    }

    /**
     * Sets rate_code
     * @param string $rate_code Type of delivery. This can vary based on shipping quote.
     * @return $this
     */
    public function setRateCode($rate_code)
    {
        $this->container['rate_code'] = $rate_code;

        return $this;
    }

    /**
     * Gets rate_id
     * @return string
     */
    public function getRateId()
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id
     * @param string $rate_id This can vary based on shipping quote
     * @return $this
     */
    public function setRateId($rate_id)
    {
        $this->container['rate_id'] = $rate_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


