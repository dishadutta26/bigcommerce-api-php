<?php
/**
 * StoreFeatures
 *
 * @package  BigCommerce\Api
 */

/**
 * Store Information APIs
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Model;

use \ArrayAccess;

class StoreFeatures implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StoreFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stencil_enabled' => 'bool',
        'sitewidehttps_enabled' => 'bool',
        'facebook_catalog_id' => 'string',
        'checkout_type' => 'string',
        'wishlists_enabled' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'stencil_enabled' => 'stencil_enabled',
        'sitewidehttps_enabled' => 'sitewidehttps_enabled',
        'facebook_catalog_id' => 'facebook_catalog_id',
        'checkout_type' => 'checkout_type',
        'wishlists_enabled' => 'wishlists_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'stencil_enabled' => 'setStencilEnabled',
        'sitewidehttps_enabled' => 'setSitewidehttpsEnabled',
        'facebook_catalog_id' => 'setFacebookCatalogId',
        'checkout_type' => 'setCheckoutType',
        'wishlists_enabled' => 'setWishlistsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'stencil_enabled' => 'getStencilEnabled',
        'sitewidehttps_enabled' => 'getSitewidehttpsEnabled',
        'facebook_catalog_id' => 'getFacebookCatalogId',
        'checkout_type' => 'getCheckoutType',
        'wishlists_enabled' => 'getWishlistsEnabled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = [])
    {
        $this->container['stencil_enabled'] = array_key_exists('stencil_enabled', $data) ? $data['stencil_enabled'] : null;
        $this->container['sitewidehttps_enabled'] = array_key_exists('sitewidehttps_enabled', $data) ? $data['sitewidehttps_enabled'] : null;
        $this->container['facebook_catalog_id'] = array_key_exists('facebook_catalog_id', $data) ? $data['facebook_catalog_id'] : null;
        $this->container['checkout_type'] = array_key_exists('checkout_type', $data) ? $data['checkout_type'] : null;
        $this->container['wishlists_enabled'] = array_key_exists('wishlists_enabled', $data) ? $data['wishlists_enabled'] : null;
    }

    /**
     * returns container
     * @return array
     */
    public function get()
    {
        return $this->container;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets stencil_enabled
     * @return bool
     */
    public function getStencilEnabled()
    {
        return $this->container['stencil_enabled'];
    }

    /**
     * Sets stencil_enabled
     * @param bool $stencil_enabled Indicates whether a store is using a Stencil theme.
     * @return $this
     */
    public function setStencilEnabled($stencil_enabled)
    {
        $this->container['stencil_enabled'] = $stencil_enabled;

        return $this;
    }

    /**
     * Gets sitewidehttps_enabled
     * @return bool
     */
    public function getSitewidehttpsEnabled()
    {
        return $this->container['sitewidehttps_enabled'];
    }

    /**
     * Sets sitewidehttps_enabled
     * @param bool $sitewidehttps_enabled Indicates if there is sitewide https.
     * @return $this
     */
    public function setSitewidehttpsEnabled($sitewidehttps_enabled)
    {
        $this->container['sitewidehttps_enabled'] = $sitewidehttps_enabled;

        return $this;
    }

    /**
     * Gets facebook_catalog_id
     * @return string
     */
    public function getFacebookCatalogId()
    {
        return $this->container['facebook_catalog_id'];
    }

    /**
     * Sets facebook_catalog_id
     * @param string $facebook_catalog_id Id of the facebook catalog. If there is none, it returns an empty string.
     * @return $this
     */
    public function setFacebookCatalogId($facebook_catalog_id)
    {
        $this->container['facebook_catalog_id'] = $facebook_catalog_id;

        return $this;
    }

    /**
     * Gets checkout_type
     * @return string
     */
    public function getCheckoutType()
    {
        return $this->container['checkout_type'];
    }

    /**
     * Sets checkout_type
     * @param string $checkout_type What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
     * @return $this
     */
    public function setCheckoutType($checkout_type)
    {
        $this->container['checkout_type'] = $checkout_type;

        return $this;
    }

    /**
     * Gets wishlists_enabled
     * @return bool
     */
    public function getWishlistsEnabled()
    {
        return $this->container['wishlists_enabled'];
    }

    /**
     * Sets wishlists_enabled
     * @param bool $wishlists_enabled Indicates if wishlists are enabled
     * @return $this
     */
    public function setWishlistsEnabled($wishlists_enabled)
    {
        $this->container['wishlists_enabled'] = $wishlists_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BigCommerce\Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


