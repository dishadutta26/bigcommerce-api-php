<?php
/**
 * OrdersApi
 *
 * @package  BigCommerce\Api
 */

/**
 * Orders APIs
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Api;

use \BigCommerce\Api\Configuration;
use \BigCommerce\Api\ApiClient;
use \BigCommerce\Api\ApiException;
use \BigCommerce\Api\ObjectSerializer;

class OrdersApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\ApiClient $apiClient set the API client
    *
    * @return OrdersApi
    */
    public function setApiClient(\BigCommerce\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createOrder
     * Create an Order
     *
     *
     * @param \BigCommerce\Api\Model\OrderRequest $body  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\Order
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createOrder($body, array $params = [])
    {
        list($response) = $this->createOrderWithHttpInfo( $body, $params);
        return $response;
    }


    /**
     * Operation createOrderWithHttpInfo
     *
     * @see self::createOrder()
     * @param \BigCommerce\Api\Model\OrderRequest $body  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderWithHttpInfo( $body, array $params = [])
    {
        
        // verify the required parameter 'body' is set
        if (!isset($body)) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createOrder');
        }
        

        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
        $_tempBody = $body;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\Order',
                '/orders'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\Order', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\Order', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation createOrderShipment
     * Create A New Order Shipment
     *
     *
     * @param int $order_id ID of the order (required)
     * @param \BigCommerce\Api\Model\OrderShipmentRequest $body  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderShipment
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createOrderShipment($order_id, $body, array $params = [])
    {
        list($response) = $this->createOrderShipmentWithHttpInfo($order_id,  $body, $params);
        return $response;
    }


    /**
     * Operation createOrderShipmentWithHttpInfo
     *
     * @see self::createOrderShipment()
     * @param int $order_id ID of the order (required)
     * @param \BigCommerce\Api\Model\OrderShipmentRequest $body  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrderShipmentWithHttpInfo($order_id,  $body, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling createOrderShipment');
        }
        
        // verify the required parameter 'body' is set
        if (!isset($body)) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createOrderShipment');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
        $_tempBody = $body;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShipment',
                '/orders/{order_id}/shipments'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShipment', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShipment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteAllOrderShipments
     * Delete All Order Shipments
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteAllOrderShipments($order_id, array $params = [])
    {
        list($response) = $this->deleteAllOrderShipmentsWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation deleteAllOrderShipmentsWithHttpInfo
     *
     * @see self::deleteAllOrderShipments()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllOrderShipmentsWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling deleteAllOrderShipments');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{order_id}/shipments'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteAllOrders
     * Delete All Orders
     *
     *
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteAllOrders(array $params = [])
    {
        list($response) = $this->deleteAllOrdersWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation deleteAllOrdersWithHttpInfo
     *
     * @see self::deleteAllOrders()
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllOrdersWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteOrder
     * Archive an Order
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteOrder($order_id, array $params = [])
    {
        list($response) = $this->deleteOrderWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation deleteOrderWithHttpInfo
     *
     * @see self::deleteOrder()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling deleteOrder');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{order_id}'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteOrderShipment
     * Delete an Order Shipment
     *
     *
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteOrderShipment($order_id, $shipment_id, array $params = [])
    {
        list($response) = $this->deleteOrderShipmentWithHttpInfo($order_id, $shipment_id, $params);
        return $response;
    }


    /**
     * Operation deleteOrderShipmentWithHttpInfo
     *
     * @see self::deleteOrderShipment()
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderShipmentWithHttpInfo($order_id, $shipment_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling deleteOrderShipment');
        }
        
        // verify the required parameter 'shipment_id' is set
        if (!isset($shipment_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment_id when calling deleteOrderShipment');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments/{shipment_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($shipment_id)) {
            $resourcePath = str_replace(
                "{" . "shipment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/orders/{order_id}/shipments/{shipment_id}'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrder
     * Get an Order
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\Order
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrder($order_id, array $params = [])
    {
        list($response) = $this->getOrderWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderWithHttpInfo
     *
     * @see self::getOrder()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrder');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\Order',
                '/orders/{order_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\Order', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\Order', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderCount
     * Get a Count of Orders
     *
     *
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrdersCountResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderCount(array $params = [])
    {
        list($response) = $this->getOrderCountWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation getOrderCountWithHttpInfo
     *
     * @see self::getOrderCount()
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrdersCountResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCountWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/orders/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrdersCountResponse',
                '/orders/count'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrdersCountResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrdersCountResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderCoupons
     * List Order Coupons
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     * @return \BigCommerce\Api\Model\OrderCoupon[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderCoupons($order_id, array $params = [])
    {
        list($response) = $this->getOrderCouponsWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderCouponsWithHttpInfo
     *
     * @see self::getOrderCoupons()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderCoupon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCouponsWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderCoupons');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/coupons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderCoupon[]',
                '/orders/{order_id}/coupons'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderCoupon[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderCoupon[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderMessages
     * Get Order Messages
     *
     *
     * @param string $order_id  (required)
     * @param array $params = []
     *     - min_id int The minimum order ID. (optional)
     *     - max_id int The maximum order ID. (optional)
     *     - customer_id int Customer ID (optional)
     *     - min_date_created string Minimum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: &#x60;Thu, 20 Apr 2017 11:32:00 -0400&#x60;  ISO-8601: &#x60;2017-04-20T11:32:00.000-04:00&#x60; (optional)
     *     - max_date_created string Maximum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: &#x60;Thu, 20 Apr 2017 11:32:00 -0400&#x60;  ISO-8601: &#x60;2017-04-20T11:32:00.000-04:00&#x60; (optional)
     *     - is_flagged bool If the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages). (optional)
     *     - status string Status of the order message. (optional)
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     * @return \BigCommerce\Api\Model\OrderMessage[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderMessages($order_id, array $params = [])
    {
        list($response) = $this->getOrderMessagesWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderMessagesWithHttpInfo
     *
     * @see self::getOrderMessages()
     * @param string $order_id  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderMessagesWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderMessages');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/messages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderMessage[]',
                '/orders/{order_id}/messages'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderMessage[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderMessage[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderProduct
     * Get an Order Product
     *
     *
     * @param int $order_id ID of the order (required)
     * @param int $product_id ID of the product (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderProduct
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderProduct($order_id, $product_id, array $params = [])
    {
        list($response) = $this->getOrderProductWithHttpInfo($order_id, $product_id, $params);
        return $response;
    }


    /**
     * Operation getOrderProductWithHttpInfo
     *
     * @see self::getOrderProduct()
     * @param int $order_id ID of the order (required)
     * @param int $product_id ID of the product (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderProductWithHttpInfo($order_id, $product_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderProduct');
        }
        
        // verify the required parameter 'product_id' is set
        if (!isset($product_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getOrderProduct');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/products/{product_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($product_id)) {
            $resourcePath = str_replace(
                "{" . "product_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderProduct',
                '/orders/{order_id}/products/{product_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderProduct', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderProduct', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderProducts
     * List Order Products
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     * @return \BigCommerce\Api\Model\OrderProduct[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderProducts($order_id, array $params = [])
    {
        list($response) = $this->getOrderProductsWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderProductsWithHttpInfo
     *
     * @see self::getOrderProducts()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderProductsWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderProducts');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderProduct[]',
                '/orders/{order_id}/products'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderProduct[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderProduct[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderShipment
     * Get a Shipment
     *
     *
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderShipment
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderShipment($order_id, $shipment_id, array $params = [])
    {
        list($response) = $this->getOrderShipmentWithHttpInfo($order_id, $shipment_id, $params);
        return $response;
    }


    /**
     * Operation getOrderShipmentWithHttpInfo
     *
     * @see self::getOrderShipment()
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderShipmentWithHttpInfo($order_id, $shipment_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderShipment');
        }
        
        // verify the required parameter 'shipment_id' is set
        if (!isset($shipment_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment_id when calling getOrderShipment');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments/{shipment_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($shipment_id)) {
            $resourcePath = str_replace(
                "{" . "shipment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShipment',
                '/orders/{order_id}/shipments/{shipment_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShipment', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShipment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderShipments
     * Get A List of Order Shipments
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     * @return \BigCommerce\Api\Model\OrderShipment[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderShipments($order_id, array $params = [])
    {
        list($response) = $this->getOrderShipmentsWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderShipmentsWithHttpInfo
     *
     * @see self::getOrderShipments()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShipment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderShipmentsWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderShipments');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShipment[]',
                '/orders/{order_id}/shipments'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShipment[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShipment[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getOrderTaxes
     * Get All Order Taxes
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     *     - details string To return detailed tax information, pass in the details query. (optional, default to true)
     * @return \BigCommerce\Api\Model\OrderTax[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getOrderTaxes($order_id, array $params = [])
    {
        list($response) = $this->getOrderTaxesWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getOrderTaxesWithHttpInfo
     *
     * @see self::getOrderTaxes()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderTax[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderTaxesWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getOrderTaxes');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/taxes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderTax[]',
                '/orders/{order_id}/taxes'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderTax[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderTax[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getShipmentCount
     * Get A Count of Shipments Per Order
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderShipmentCount
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getShipmentCount($order_id, array $params = [])
    {
        list($response) = $this->getShipmentCountWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation getShipmentCountWithHttpInfo
     *
     * @see self::getShipmentCount()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShipmentCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentCountWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getShipmentCount');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShipmentCount',
                '/orders/{order_id}/shipments/count'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShipmentCount', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShipmentCount', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getShippingAddress
     * Get a Shipping Address
     *
     *
     * @param string $order_id  (required)
     * @param string $id  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderShippingAddress
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getShippingAddress($order_id, $id, array $params = [])
    {
        list($response) = $this->getShippingAddressWithHttpInfo($order_id, $id, $params);
        return $response;
    }


    /**
     * Operation getShippingAddressWithHttpInfo
     *
     * @see self::getShippingAddress()
     * @param string $order_id  (required)
     * @param string $id  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShippingAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShippingAddressWithHttpInfo($order_id, $id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getShippingAddress');
        }
        
        // verify the required parameter 'id' is set
        if (!isset($id)) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getShippingAddress');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipping_addresses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($id)) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShippingAddress',
                '/orders/{order_id}/shipping_addresses/{id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShippingAddress', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShippingAddress', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getShippingQuote
     * Get a Shipping Quote
     *
     *
     * @param int $order_id ID of the order (required)
     * @param int $shipping_address_id Shipping address ID (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\ShippingQuote
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getShippingQuote($order_id, $shipping_address_id, array $params = [])
    {
        list($response) = $this->getShippingQuoteWithHttpInfo($order_id, $shipping_address_id, $params);
        return $response;
    }


    /**
     * Operation getShippingQuoteWithHttpInfo
     *
     * @see self::getShippingQuote()
     * @param int $order_id ID of the order (required)
     * @param int $shipping_address_id Shipping address ID (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\ShippingQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShippingQuoteWithHttpInfo($order_id, $shipping_address_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling getShippingQuote');
        }
        
        // verify the required parameter 'shipping_address_id' is set
        if (!isset($shipping_address_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $shipping_address_id when calling getShippingQuote');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($shipping_address_id)) {
            $resourcePath = str_replace(
                "{" . "shipping_address_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipping_address_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\ShippingQuote',
                '/orders/{order_id}/shipping_addresses/{shipping_address_id}/shipping_quotes'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\ShippingQuote', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\ShippingQuote', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation listOrderStatuses
     * Get All Order Statuses
     *
     *
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderStatus[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listOrderStatuses(array $params = [])
    {
        list($response) = $this->listOrderStatusesWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation listOrderStatusesWithHttpInfo
     *
     * @see self::listOrderStatuses()
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderStatus[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrderStatusesWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/order_statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderStatus[]',
                '/order_statuses'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderStatus[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderStatus[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation listOrders
     * List Orders
     *
     *
     * @param array $params = []
     *     - min_id int The minimum order ID. (optional)
     *     - max_id int The maximum order ID. (optional)
     *     - min_total float The minimum order total in float format. eg. 12.50 (optional)
     *     - max_total float The maximum order total in float format. eg. 12.50 (optional)
     *     - customer_id int Customer ID (optional)
     *     - email string The email of the customer. (optional)
     *     - status_id int The staus ID of the order. You can get the status id from the &#x60;/orders&#x60; endpoints. (optional)
     *     - cart_id string The cart ID of the order. (optional)
     *     - payment_method string The payment method used on the order. (optional)
     *     - min_date_created string Minimum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: &#x60;Thu, 20 Apr 2017 11:32:00 -0400&#x60;  ISO-8601: &#x60;2017-04-20T11:32:00.000-04:00&#x60; (optional)
     *     - max_date_created string Maximum date the order was created in RFC-2822 or ISO-8601.  RFC-2822: &#x60;Thu, 20 Apr 2017 11:32:00 -0400&#x60;  ISO-8601: &#x60;2017-04-20T11:32:00.000-04:00&#x60; (optional)
     *     - max_date_modified string Maximum date the order was modified in RFC-2822 or ISO-8601.  RFC-2822: &#x60;Thu, 20 Apr 2017 11:32:00 -0400&#x60;  ISO-8601: &#x60;2017-04-20T11:32:00.000-04:00&#x60; (optional)
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     *     - sort string Direction to sort orders asc or desc. Ex. sort&#x3D;date_created:desc (optional)
     *     - is_deleted bool If the order was deleted or archived. (optional)
     * @return \BigCommerce\Api\Model\Order[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listOrders(array $params = [])
    {
        list($response) = $this->listOrdersWithHttpInfo($params);
        return $response;
    }


    /**
     * Operation listOrdersWithHttpInfo
     *
     * @see self::listOrders()
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\Order[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrdersWithHttpInfo(array $params = [])
    {
        

        // parse inputs
        $resourcePath = "/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\Order[]',
                '/orders'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\Order[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\Order[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation listShippingAddresses
     * Get A List of Order Shipping Address
     *
     *
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     *     - page float The page to return in the response. (optional)
     *     - limit float Number of results to return. (optional)
     * @return \BigCommerce\Api\Model\OrderShippingAddress[]
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listShippingAddresses($order_id, array $params = [])
    {
        list($response) = $this->listShippingAddressesWithHttpInfo($order_id, $params);
        return $response;
    }


    /**
     * Operation listShippingAddressesWithHttpInfo
     *
     * @see self::listShippingAddresses()
     * @param int $order_id ID of the order (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShippingAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listShippingAddressesWithHttpInfo($order_id, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling listShippingAddresses');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipping_addresses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShippingAddress[]',
                '/orders/{order_id}/shipping_addresses'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShippingAddress[]', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShippingAddress[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation updateOrder
     * Update an Order
     *
     *
     * @param int $order_id ID of the order (required)
     * @param \BigCommerce\Api\Model\OrderRequest $body  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\Order
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateOrder($order_id, $body, array $params = [])
    {
        list($response) = $this->updateOrderWithHttpInfo($order_id,  $body, $params);
        return $response;
    }


    /**
     * Operation updateOrderWithHttpInfo
     *
     * @see self::updateOrder()
     * @param int $order_id ID of the order (required)
     * @param \BigCommerce\Api\Model\OrderRequest $body  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderWithHttpInfo($order_id,  $body, array $params = [])
    {
        
        // verify the required parameter 'body' is set
        if (!isset($body)) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateOrder');
        }
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling updateOrder');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
        $_tempBody = $body;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\Order',
                '/orders/{order_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\Order', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\Order', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation updateOrderShipment
     * Update A Shipment
     *
     *
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param \BigCommerce\Api\Model\OrderShipmentRequest $body  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\OrderShipment
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateOrderShipment($order_id, $shipment_id, $body, array $params = [])
    {
        list($response) = $this->updateOrderShipmentWithHttpInfo($order_id, $shipment_id,  $body, $params);
        return $response;
    }


    /**
     * Operation updateOrderShipmentWithHttpInfo
     *
     * @see self::updateOrderShipment()
     * @param int $order_id ID of the order (required)
     * @param int $shipment_id Shipment ID (required)
     * @param \BigCommerce\Api\Model\OrderShipmentRequest $body  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\OrderShipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderShipmentWithHttpInfo($order_id, $shipment_id,  $body, array $params = [])
    {
        
        // verify the required parameter 'order_id' is set
        if (!isset($order_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $order_id when calling updateOrderShipment');
        }
        
        // verify the required parameter 'shipment_id' is set
        if (!isset($shipment_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $shipment_id when calling updateOrderShipment');
        }
        
        // verify the required parameter 'body' is set
        if (!isset($body)) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateOrderShipment');
        }
        

        // parse inputs
        $resourcePath = "/orders/{order_id}/shipments/{shipment_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($order_id)) {
            $resourcePath = str_replace(
                "{" . "order_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_id),
                $resourcePath
            );
        }
        // path params


        if (isset($shipment_id)) {
            $resourcePath = str_replace(
                "{" . "shipment_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($shipment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
        $_tempBody = $body;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\OrderShipment',
                '/orders/{order_id}/shipments/{shipment_id}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\OrderShipment', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\OrderShipment', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
