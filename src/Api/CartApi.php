<?php
/**
 * CartApi
 *
 * @package  BigCommerce\Api
 */

/**
 * Data Model for BigCommerce's v3 Server-to-Server Cart API
 *
 * OpenAPI spec version: v0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\Api;

use \BigCommerce\Api\Configuration;
use \BigCommerce\Api\ApiClient;
use \BigCommerce\Api\ApiException;
use \BigCommerce\Api\ObjectSerializer;

class CartApi
{

    /**
     * API Client
     *
     * @var \BigCommerce\Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BigCommerce\Api\ApiClient $apiClient The api client to use
     */
    public function __construct(\BigCommerce\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
    * Get API client
    *
    * @return \BigCommerce\Api\ApiClient get the API client
    */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
    * Set the API client
    *
    * @param \BigCommerce\Api\ApiClient $apiClient set the API client
    *
    * @return CartApi
    */
    public function setApiClient(\BigCommerce\Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addItem
     * 
     *
     *
     * @param string $cart_id  (required)
     * @param \BigCommerce\Api\Model\CartRequestData $item_data  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\CartResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function addItem($cart_id, $item_data, array $params = [])
    {
        list($response) = $this->addItemWithHttpInfo($cart_id,  $item_data, $params);
        return $response;
    }


    /**
     * Operation addItemWithHttpInfo
     *
     * @see self::addItem()
     * @param string $cart_id  (required)
     * @param \BigCommerce\Api\Model\CartRequestData $item_data  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addItemWithHttpInfo($cart_id,  $item_data, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling addItem');
        }
        
        // verify the required parameter 'item_data' is set
        if (!isset($item_data)) {
            throw new \InvalidArgumentException('Missing the required parameter $item_data when calling addItem');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($item_data)) {
        $_tempBody = $item_data;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartResponse',
                '/carts/{cartId}/items'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation createCart
     * 
     *
     *
     * @param \BigCommerce\Api\Model\CartCreateRequestData $cart_data  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\CartResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createCart($cart_data, array $params = [])
    {
        list($response) = $this->createCartWithHttpInfo( $cart_data, $params);
        return $response;
    }


    /**
     * Operation createCartWithHttpInfo
     *
     * @see self::createCart()
     * @param \BigCommerce\Api\Model\CartCreateRequestData $cart_data  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCartWithHttpInfo( $cart_data, array $params = [])
    {
        
        // verify the required parameter 'cart_data' is set
        if (!isset($cart_data)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_data when calling createCart');
        }
        

        // parse inputs
        $resourcePath = "/carts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($cart_data)) {
        $_tempBody = $cart_data;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartResponse',
                '/carts'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteCart
     * 
     *
     *
     * @param string $cart_id This cart&#39;s unique ID. (required)
     * @param array $params = []
     * @return null
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteCart($cart_id, array $params = [])
    {
        list($response) = $this->deleteCartWithHttpInfo($cart_id, $params);
        return $response;
    }


    /**
     * Operation deleteCartWithHttpInfo
     *
     * @see self::deleteCart()
     * @param string $cart_id This cart&#39;s unique ID. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCartWithHttpInfo($cart_id, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling deleteCart');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/carts/{cartId}'
            );
            return [null, $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            }

            throw $e;
        }
    }
    /**
     * Operation deleteItem
     * 
     *
     *
     * @param string $cart_id  (required)
     * @param int $item_id  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\CartResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteItem($cart_id, $item_id, array $params = [])
    {
        list($response) = $this->deleteItemWithHttpInfo($cart_id, $item_id, $params);
        return $response;
    }


    /**
     * Operation deleteItemWithHttpInfo
     *
     * @see self::deleteItem()
     * @param string $cart_id  (required)
     * @param int $item_id  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemWithHttpInfo($cart_id, $item_id, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling deleteItem');
        }
        
        // verify the required parameter 'item_id' is set
        if (!isset($item_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling deleteItem');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}/items/{itemId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // path params


        if (isset($item_id)) {
            $resourcePath = str_replace(
                "{" . "itemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartResponse',
                '/carts/{cartId}/items/{itemId}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation getCart
     * 
     *
     *
     * @param string $cart_id The identifier of a specific cart. (required)
     * @param array $params = []
     *     - include string Supports Physical and Digital product options as include param (optional)
     * @return \BigCommerce\Api\Model\CartResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getCart($cart_id, array $params = [])
    {
        list($response) = $this->getCartWithHttpInfo($cart_id, $params);
        return $response;
    }


    /**
     * Operation getCartWithHttpInfo
     *
     * @see self::getCart()
     * @param string $cart_id The identifier of a specific cart. (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCartWithHttpInfo($cart_id, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling getCart');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartResponse',
                '/carts/{cartId}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation setRedirectUrls
     * 
     *
     *
     * @param string $cart_id  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\CartRedirectUrlsResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function setRedirectUrls($cart_id, array $params = [])
    {
        list($response) = $this->setRedirectUrlsWithHttpInfo($cart_id, $params);
        return $response;
    }


    /**
     * Operation setRedirectUrlsWithHttpInfo
     *
     * @see self::setRedirectUrls()
     * @param string $cart_id  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartRedirectUrlsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRedirectUrlsWithHttpInfo($cart_id, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling setRedirectUrls');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}/redirect_urls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartRedirectUrlsResponse',
                '/carts/{cartId}/redirect_urls'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartRedirectUrlsResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartRedirectUrlsResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation updateCart
     * 
     *
     *
     * @param string $cart_id  (required)
     * @param \BigCommerce\Api\Model\CartUpdateRequestData $cart_update_data  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\Cart
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateCart($cart_id, $cart_update_data, array $params = [])
    {
        list($response) = $this->updateCartWithHttpInfo($cart_id,  $cart_update_data, $params);
        return $response;
    }


    /**
     * Operation updateCartWithHttpInfo
     *
     * @see self::updateCart()
     * @param string $cart_id  (required)
     * @param \BigCommerce\Api\Model\CartUpdateRequestData $cart_update_data  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\Cart, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCartWithHttpInfo($cart_id,  $cart_update_data, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling updateCart');
        }
        
        // verify the required parameter 'cart_update_data' is set
        if (!isset($cart_update_data)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_update_data when calling updateCart');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($cart_update_data)) {
        $_tempBody = $cart_update_data;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\Cart',
                '/carts/{cartId}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\Cart', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\Cart', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
    /**
     * Operation updateItem
     * 
     *
     *
     * @param string $cart_id  (required)
     * @param int $item_id  (required)
     * @param \BigCommerce\Api\Model\CartUpdateRequest $line_item  (required)
     * @param array $params = []
     * @return \BigCommerce\Api\Model\CartResponse
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateItem($cart_id, $item_id, $line_item, array $params = [])
    {
        list($response) = $this->updateItemWithHttpInfo($cart_id, $item_id,  $line_item, $params);
        return $response;
    }


    /**
     * Operation updateItemWithHttpInfo
     *
     * @see self::updateItem()
     * @param string $cart_id  (required)
     * @param int $item_id  (required)
     * @param \BigCommerce\Api\Model\CartUpdateRequest $line_item  (required)
     * @param array $params = []
     * @throws \BigCommerce\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\Model\CartResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemWithHttpInfo($cart_id, $item_id,  $line_item, array $params = [])
    {
        
        // verify the required parameter 'cart_id' is set
        if (!isset($cart_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $cart_id when calling updateItem');
        }
        
        // verify the required parameter 'item_id' is set
        if (!isset($item_id)) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling updateItem');
        }
        
        // verify the required parameter 'line_item' is set
        if (!isset($line_item)) {
            throw new \InvalidArgumentException('Missing the required parameter $line_item when calling updateItem');
        }
        

        // parse inputs
        $resourcePath = "/carts/{cartId}/items/{itemId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        foreach ( $params as $key => $param ) {
            $queryParams[ $key ] = $this->apiClient->getSerializer()->toQueryValue( $param );
        }

        // path params


        if (isset($cart_id)) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cart_id),
                $resourcePath
            );
        }
        // path params


        if (isset($item_id)) {
            $resourcePath = str_replace(
                "{" . "itemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($line_item)) {
        $_tempBody = $line_item;
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BigCommerce\Api\Model\CartResponse',
                '/carts/{cartId}/items/{itemId}'
            );
            return [$this->apiClient->getSerializer()->deserialize($response, '\BigCommerce\Api\Model\CartResponse', $httpHeader), $statusCode, $httpHeader];

         } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BigCommerce\Api\Model\CartResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            
            }

            throw $e;
        }
    }
}
